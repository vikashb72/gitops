#prometheus:
#  rbac:
#    create: true
#  serviceAccounts:
#    server:
#      create: true
#  server:
#    name: server
#    enableServiceLinks: true
#    extraFlags:
#      - web.enable-lifecycle
#    global:
#      scrape_interval: 1m
#      scrape_timeout: 10s
#      evaluation_interval: 1m
#    persistentVolume:
#      enabled: true
#      accessModes:
#        - ReadWriteOnce
#      mountPath: /data
#      size: 5Gi
#      storageClass: nfs-client
#    service:
#      enabled: true
#      type: LoadBalancer
#      loadBalancerIP: 192.168.49.227
#  prometheus-pushgateway:
#    enable: true
#
#  extraScrapeConfigs: ""
#    # - job_name: 'prometheus-blackbox-exporter'
#    #   metrics_path: /probe
#    #   params:
#    #     module: [http_2xx]
#    #   static_configs:
#    #     - targets:
#    #       - https://example.com
#    #   relabel_configs:
#    #     - source_labels: [__address__]
#    #       target_label: __param_target
#    #     - source_labels: [__param_target]
#    #       target_label: instance
#    #     - target_label: __address__
#    #       replacement: prometheus-blackbox-exporter:9115

kube-prometheus-stack:
  global:
      createAggregateClusterRoles: true
      pspEnabled: false
  alertmanager:
    enabled: true
    ingress:
      enabled: false
    service:
      loadBalancerIP: ""
      type: ClusterIP
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      volumes: []
      volumeMounts: []
      initContainers: []
  grafana:
    enabled: true
    initChownData:
      enabled: false
    defaultDashboardsEditable: true
    rbac:
      pspEnabled: false
    ingress:
      enabled: false
    persistence:
      enabled: true
      type: pvc
      storageClassName: nfs-client
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      finalizers:
        - kubernetes.io/pvc-protection
    serviceAccount:
      create: true
      autoMount: true
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: "1"
      datasources:
        enabled: true
        defaultDatasourceEnabled: true
        isDefaultDatasource: true
        name: Prometheus
        uid: prometheus
        ## URL of prometheus datasource
        # url: http://prometheus-stack-prometheus:9090/
        alertmanager:
          enabled: true
          name: Alertmanager
          uid: alertmanager
    extraConfigmapMounts: []
    # - name: certs-configmap
    #   mountPath: /etc/grafana/ssl/
    #   configMap: certs-configmap
    #   readOnly: true
    deleteDatasources: []
    # - name: example-datasource
    #   orgId: 1
    additionalDataSources: []
    prune: true
    serviceMonitor:
      enabled: true
    service:
      enabled: true
      type: LoadBalancer
      loadBalancerIP: 192.168.49.231
  prometheusOperator:
    service:
      loadBalancerIP: ""
      type: ClusterIP
  prometheus:
    enabled: true
    agentMode: false
    service:
      type: LoadBalancer
      loadBalancerIP: 192.168.49.227
    ingress:
      enabled: false
    prometheusSpec:
      nodeSelector: {}
      ruleNamespaceSelector: {}
      # ruleNamespaceSelector:
      #   matchLabels:
      #     prometheus: somelabel
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      volumes: []
      volumeMounts: []
      additionalScrapeConfigs: []
      # - job_name: kube-etcd
      #   kubernetes_sd_configs:
      #     - role: node
      #   scheme: https
      #   tls_config:
      #     ca_file:   /etc/prometheus/secrets/etcd-client-cert/etcd-ca
      #     cert_file: /etc/prometheus/secrets/etcd-client-cert/etcd-client
      #     key_file:  /etc/prometheus/secrets/etcd-client-cert/etcd-client-key
      #   relabel_configs:
      #   - action: labelmap
      #     regex: __meta_kubernetes_node_label_(.+)
      #   - source_labels: [__address__]
      #     action: replace
      #     targetLabel: __address__
      #     regex: ([^:;]+):(\d+)
      #     replacement: ${1}:2379
      #   - source_labels: [__meta_kubernetes_node_name]
      #     action: keep
      #     regex: .*mst.*
      #   - source_labels: [__meta_kubernetes_node_name]
      #     action: replace
      #     targetLabel: node
      #     regex: (.*)
      #     replacement: ${1}
      #   metric_relabel_configs:
      #   - regex: (kubernetes_io_hostname|failure_domain_beta_kubernetes_io_region|beta_kubernetes_io_os|beta_kubernetes_io_arch|beta_kubernetes_io_instance_type|failure_domain_beta_kubernetes_io_zone)
      #     action: labeldrop
      #
      ## If scrape config contains a repetitive section, you may want to use a template.
      ## In the following example, you can see how to define `gce_sd_configs` for multiple zones
      # additionalScrapeConfigs: |
      #  - job_name: "node-exporter"
      #    gce_sd_configs:
      #    {{range $zone := .Values.gcp_zones}}
      #    - project: "project1"
      #      zone: "{{$zone}}"
      #      port: 9100
      #    {{end}}
      #    relabel_configs:
      #    ...
      additionalAlertManagerConfigs: []
      # - consul_sd_configs:
      #   - server: consul.dev.test:8500
      #     scheme: http
      #     datacenter: dev
      #     tag_separator: ','
      #     services:
      #       - metrics-prometheus-alertmanager
    additionalServiceMonitors: []
    additionalPodMonitors: []
  cleanPrometheusOperatorObjectNames: false
  extraManifests: []
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #   labels:
    #     name: prometheus-extra
    #   data:
    #     extra-data: "value"
