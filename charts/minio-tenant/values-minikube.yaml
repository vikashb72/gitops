env:
  EVT: minikube

tenant:
  tenant:
    name: minikube
    configuration:
      name: minio-admin-credentials
    configSecret:
      name: minio-admin-credentials
      accessKey: ""
      secretKey: ""
      existingSecret: true
    pools:
      ###
      # The number of MinIO Tenant Pods / Servers in this pool.
      # For standalone mode, supply 1. For distributed mode, supply 4 or more.
      # Note that the operator does not support upgrading from standalone to distributed mode.
      - servers: 4
        name: pool-0
        volumesPerServer: 3
        size: 8Gi
        #storageClassName: nfs-client
        #storageClassName: standard
    mountPath: /export
    subPath: /data
    metrics:
      enabled: false
      port: 9000
      protocol: http
    ###
    # Configures external certificate settings for the Tenant.
    certificate:
      ###
      # Specify an array of Kubernetes TLS secrets, where each entry corresponds to a secret the TLS private key and public certificate pair.
      #
      # This is used by MinIO to verify TLS connections from clients using those CAs
      # If you omit this and have clients using TLS certificates minted by an external CA, those connections may fail with warnings around certificate verification.
      # See `Operator CRD: TenantSpec <https://min.io/docs/minio/kubernetes/upstream/reference/operator-crd.html#tenantspec>`__.
      externalCaCertSecret: [ ]
      ###
      # Specify an array of Kubernetes secrets, where each entry corresponds to a secret contains the TLS private key and public certificate pair.
      #
      # Omit this to use only the MinIO Operator autogenerated certificates.
      # 
      # If you omit this field *and* set ``requestAutoCert`` to false, the Tenant starts without TLS.
      #
      # See `Operator CRD: TenantSpec <https://min.io/docs/minio/kubernetes/upstream/reference/operator-crd.html#tenantspec>`__.
      #
      # .. important::
      #
      #    The MinIO Operator may output TLS connectivity errors if it cannot trust the Certificate Authority (CA) which minted the custom certificates.
      #
      #    You can pass the CA to the Operator to allow it to trust that cert.
      #    See `Self-Signed, Internal, and Private Certificates <https://min.io/docs/minio/kubernetes/upstream/operations/network-encryption.html#self-signed-internal-and-private-certificates>`__ for more information.
      #    This step may also be necessary for globally trusted CAs where you must provide intermediate certificates to the Operator to help build the full chain of trust.
      externalCertSecret: [ ]
      ###
      # Enable automatic Kubernetes based `certificate generation and signing <https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster>`__
      requestAutoCert: true
      ###
      # The minimum number of days to expiry before an alert for an expiring certificate is fired.
      # In the below example, if a given certificate will expire in 7 days then expiration events will only be triggered 1 day before expiry
      # certExpiryAlertThreshold: 1
      ###
      # This field is used only when ``requestAutoCert: true``.
      # Use this field to set CommonName for the auto-generated certificate. 
      # MinIO defaults to using the internal Kubernetes DNS name for the pod
      # The default DNS name format is typically ``*.minio.default.svc.cluster.local``.
      #
      # See `Operator CRD: CertificateConfig <https://min.io/docs/minio/kubernetes/upstream/reference/operator-crd.html#certificateconfig>`__
      certConfig: { }
    ###
    # MinIO features to enable or disable in the MinIO Tenant
    # See `Operator CRD: Features <https://min.io/docs/minio/kubernetes/upstream/reference/operator-crd.html#features>`__.
    features:
      bucketDNS: false
      domains: { }
      enableSFTP: false
    ###
    # Array of objects describing one or more buckets to create during tenant provisioning.
    # Example:
    # 
    # .. code-block:: yaml
    #
    #    - name: my-minio-bucket
    #         objectLock: false        # optional
    #         region: us-east-1        # optional
    buckets: 
      - name: loki-admin
        objectLock: false
      - name: loki-chunk
        objectLock: false
      - name: loki-ruler
        objectLock: false
    ###
    # Array of Kubernetes secrets from which the Operator generates MinIO users during tenant provisioning.
    #
    # Each secret should specify the ``CONSOLE_ACCESS_KEY`` and ``CONSOLE_SECRET_KEY`` as the access key and secret key for that user.
    #users: [ ]
    users:
      - name: minio-loki-credentials
    podManagementPolicy: Parallel
    liveness: { }
    readiness: { }
    startup: { }
    lifecycle: { }
    exposeServices:
      minio: true
      console: true
    ###
    # Directs the Operator to add the Tenant's metric scrape configuration to an existing Kubernetes Prometheus deployment managed by the Prometheus Operator.
    prometheusOperator: false
    logging: { }
    # Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
    env: [ ]
    ###
    # An array of `Volumes <https://kubernetes.io/docs/concepts/storage/volumes/>`__ which the Operator can mount to Tenant pods.
    #
    # The volumes must exist *and* be accessible to the Tenant pods.
    additionalVolumes: [ ]
    ###
    # An array of volume mount points associated to each Tenant container.
    # 
    # Specify each item in the array as follows:
    #
    # .. code-block:: yaml
    #
    #    volumeMounts:
    #    - name: volumename
    #      mountPath: /path/to/mount
    #
    # The ``name`` field must correspond to an entry in the ``additionalVolumes`` array.
    additionalVolumeMounts: [ ]
    # Define configuration for KES (stateless and distributed key-management system)
    # Refer https://github.com/minio/kes
    #kes:
    #  ## Image field:
    #  # Image from tag (original behavior), for example:
    #  # image:
    #  #   repository: quay.io/minio/kes
    #  #   tag: 2024-11-25T13-44-31Z
    #  # Image from digest (added after original behavior), for example:
    #  # image:
    #  #   repository: quay.io/minio/kes@sha256
    #  #   digest: fb15af611149892f357a8a99d1bcd8bf5dae713bd64c15e6eb27fbdb88fc208b
    #  image:
    #    repository: quay.io/minio/kes
    #    tag: 2024-11-25T13-44-31Z
    #    pullPolicy: IfNotPresent
    #  env: [ ]
    #  replicas: 2
    #  configuration: |-
    #    address: :7373
    #    tls:
    #      key: /tmp/kes/server.key   # Path to the TLS private key
    #      cert: /tmp/kes/server.crt # Path to the TLS certificate
    #      proxy:
    #        identities: []
    #        header:
    #          cert: X-Tls-Client-Cert
    #    admin:
    #      identity: ${MINIO_KES_IDENTITY}
    #    cache:
    #      expiry:
    #        any: 5m0s
    #        unused: 20s
    #    log:
    #      error: on
    #      audit: off
    #    keystore:
    #      # KES configured with fs (File System mode) doesn't work in Kubernetes environments and is not recommended
    #      # use a real KMS
    #      # fs:
    #      #   path: "./keys" # Path to directory. Keys will be stored as files. Not Recommended for Production.
    #      vault:
    #        endpoint: "http://vault.default.svc.cluster.local:8200" # The Vault endpoint
    #        namespace: "" # An optional Vault namespace. See: https://www.vaultproject.io/docs/enterprise/namespaces/index.html
    #        prefix: "my-minio"    # An optional K/V prefix. The server will store keys under this prefix.
    #        approle:    # AppRole credentials. See: https://www.vaultproject.io/docs/auth/approle.html
    #          id: "<YOUR APPROLE ID HERE>"      # Your AppRole Role ID
    #          secret: "<YOUR APPROLE SECRET ID HERE>"  # Your AppRole Secret ID
    #          retry: 15s  # Duration until the server tries to re-authenticate after connection loss.
    #        tls:        # The Vault client TLS configuration for mTLS authentication and certificate verification
    #          key: ""     # Path to the TLS client private key for mTLS authentication to Vault
    #          cert: ""    # Path to the TLS client certificate for mTLS authentication to Vault
    #          ca: ""      # Path to one or multiple PEM root CA certificates
    #        status:     # Vault status configuration. The server will periodically reach out to Vault to check its status.
    #          ping: 10s   # Duration until the server checks Vault's status again.
    #      # aws:
    #      #   # The AWS SecretsManager key store. The server will store
    #      #   # secret keys at the AWS SecretsManager encrypted with
    #      #   # AWS-KMS. See: https://aws.amazon.com/secrets-manager
    #      #   secretsmanager:
    #      #     endpoint: ""   # The AWS SecretsManager endpoint      - e.g.: secretsmanager.us-east-2.amazonaws.com
    #      #     region: ""     # The AWS region of the SecretsManager - e.g.: us-east-2
    #      #     kmskey: ""     # The AWS-KMS key ID used to en/decrypt secrets at the SecretsManager. By default (if not set) the default AWS-KMS key will be used.
    #      #     credentials:   # The AWS credentials for accessing secrets at the AWS SecretsManager.
    #      #       accesskey: ""  # Your AWS Access Key
    #      #       secretkey: ""  # Your AWS Secret Key
    #      #       token: ""      # Your AWS session token (usually optional)
    #  imagePullPolicy: "IfNotPresent"
    #  externalCertSecret: null
    #  clientCertSecret: null
    #  # Key name to be created on the KMS, default is "my-minio-key"
    #  keyName: ""
    #  resources: { }
    #  nodeSelector: { }
    #  affinity:
    #    nodeAffinity: { }
    #    podAffinity: { }
    #    podAntiAffinity: { }
    #  tolerations: [ ]
    #  annotations: { }
    #  labels: { }
    #  serviceAccountName: ""
    #  securityContext:
    #    runAsUser: 1000
    #    runAsGroup: 1000
    #    runAsNonRoot: true
    #    fsGroup: 1000
    #  containerSecurityContext:
    #    runAsUser: 1000
    #    runAsGroup: 1000
    #    runAsNonRoot: true
    #    allowPrivilegeEscalation: false
    #    capabilities:
    #      drop:
    #        - ALL
    #    seccompProfile:
    #      type: RuntimeDefault
  
  ###
  # Configures `Ingress <https://kubernetes.io/docs/concepts/services-networking/ingress/>`__ for the Tenant S3 API and Console.
  #
  # Set the keys to conform to the Ingress controller and configuration of your choice.
  ingress:
    api:
      enabled: false
    console:
      enabled: false
  # Use an extraResources template section to include additional Kubernetes resources
  # with the Helm deployment.
  #extraResources:
  #  - |
  #    apiVersion: v1
  #    kind: Secret
  #    type: Opaque
  #    metadata:
  #      name: {{ dig "tenant" "configSecret" "name" "" (.Values | merge (dict)) }}
  #    stringData:
  #      config.env: |-
  #        export MINIO_ROOT_USER='minio'
  #        export MINIO_ROOT_PASSWORD='minio123'
  
