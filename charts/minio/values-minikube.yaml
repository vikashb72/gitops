env:
  EVT: minikube

minio:
  mode: standalone

  #rootUser: ""
  #rootPassword: ""

  existingSecret: "minio-admin-credentials"

  ## Path where PV would be mounted on the MinIO Pod
  mountPath: "/export"
  drivesPerNode: 1
  replicas: 1
  pools: 1

  tls:
    enabled: false
    certSecret: ""
    publicCrt: public.crt
    privateKey: private.key

  trustedCertsSecret: ""

  persistence:
    enabled: true
    #annotations: {}
    existingClaim: "minio-pvc"
    storageClassName: "nfs-client"
    volumeName: "minio"
    accessMode: ReadWriteOnce
    size: 8Gi
    subPath: ""

  service:
    type: ClusterIP

  ingress:
    enabled: false

  consoleIngress:
    enabled: false

  policies: []
  # - name: writepolicy
  #   statements:
  #     - effect: Allow  # this is the default
  #       resources:
  #         - 'arn:aws:s3:::example*/*'
  #       actions:
  #         - "s3:AbortMultipartUpload"
  #         - "s3:GetObject"
  #         - "s3:DeleteObject"
  #         - "s3:PutObject"
  #         - "s3:ListMultipartUploadParts"
  #     - resources:
  #         - 'arn:aws:s3:::example*'
  #       actions:
  #         - "s3:CreateBucket"
  #         - "s3:DeleteBucket"
  #         - "s3:GetBucketLocation"
  #         - "s3:ListBucket"
  #         - "s3:ListBucketMultipartUploads"
  # - name: readonlypolicy
  #   statements:
  #     - resources:
  #         - 'arn:aws:s3:::example*/*'
  #       actions:
  #         - "s3:GetObject"
  #     - resources:
  #         - 'arn:aws:s3:::example*'
  #       actions:
  #         - "s3:GetBucketLocation"
  #         - "s3:ListBucket"
  #         - "s3:ListBucketMultipartUploads"

  users:
    - accessKey: loki
      existingSecret: "minio-user-credentials"
      existingSecretKey: secretKey
      policy: readwrite

  svcaccts: []

  buckets:
    - name: loki-chunks
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: loki-admin
      policy: none
      purge: false
      versioning: false
      objectlocking: false
    - name: loki-rules
      policy: none
      purge: false
      versioning: false
      objectlocking: false

  oidc:
    enabled: false
    configUrl: "https://identity-provider-url/.well-known/openid-configuration"
    clientId: "minio"
    clientSecret: ""
    # Provide existing client secret from the Kubernetes Secret resource, existing secret will have priority over `clientId` and/or `clientSecret``
    existingClientSecretName: ""
    existingClientIdKey: ""
    existingClientSecretKey: ""
    claimName: "policy"
    scopes: "openid,profile,email"
    redirectUri: "https://console-endpoint-url/oauth_callback"

  serviceAccount:
    create: true
    name: "minio-sa"

  metrics:
    serviceMonitor:
      enabled: false

