grafana:
  testFramework:
    enabled: false
  rbac:
    create: true
  serviceAccount:
    create: true
  service:
    enabled: true
    type: LoadBalancer
    loadBalancerIP: 192.168.49.231
  replicas: 1
  extraConfigmapMounts: []
    # - name: certs-configmap
    #   mountPath: /etc/grafana/ssl/
    #   subPath: certificates.crt # (optional)
    #   configMap: certs-configmap
    #   readOnly: true
    #   optional: false
  extraEmptyDirMounts: []
    # - name: provisioning-notifiers
    #   mountPath: /etc/grafana/provisioning/notifiers
  #downloadDashboards:
  #  env: {}
  #  envFromSecret: ""
  #  resources: {}
  #  securityContext:
  #    allowPrivilegeEscalation: false
  #    capabilities:
  #      drop:
  #      - ALL
  #    seccompProfile:
  #      type: RuntimeDefault
  #  envValueFrom: {}
  #  #  ENV_NAME:
  #  #    configMapKeyRef:
  #  #      name: configmap-name
  #  #      key: value_key
  serviceMonitor:
    enabled: false
    path: /metrics
  extraExposePorts: []
   # - name: keycloak
   #   port: 8080
   #   targetPort: 8080
  ingress:
    enabled: false
    tls: []
  route:
    main:
      enabled: false
  resources: {}
  extraContainerVolumes: []
  #  - name: volume-from-secret
  #    secret:
  #      secretName: secret-to-mount
  #  - name: empty-dir-volume
  #    emptyDir: {}

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    type: pvc
    enabled: true
    storageClassName: nfs-client
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    # annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    # selectorLabels: {}
    ## Sub-directory of the PV to mount. Can be templated.
    # subPath: ""
    ## Name of an existing PVC. Can be templated.
    # existingClaim:
    ## Extra labels to apply to a PVC.
    extraPvcLabels: {}
    disableWarning: false

    ## If persistence is not enabled, this allows to mount the
    ## local storage in-memory to improve performance
    ##
    inMemory:
      enabled: false
    lookupVolumeName: true

  initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the grafana-server to be run with an arbitrary user
  ##
    enabled: false

  # Administrator credentials when not using an existing secret (see below)
  adminUser: admin
  # adminPassword: strongpassword

  # Use an existing secret for the admin user.
  #admin:
  #  ## Name of the secret. Can be templated.
  #  existingSecret: ""
  #  userKey: admin-user
  #  passwordKey: admin-password

  env: {}
  envValueFrom: {}
    #  ENV_NAME:
    #    configMapKeyRef:
    #      name: configmap-name
    #      key: value_key

  envFromSecret: ""
  envRenderSecret: {}
  envFromSecrets: []
  ## - name: secret-name
  ##   prefix: prefix
  ##   optional: true

  envFromConfigMaps: []
  ## - name: configmap-name
  ##   prefix: prefix
  ##   optional: true

  enableServiceLinks: true

  extraSecretMounts: []
    # - name: secret-files
    #   mountPath: /etc/secrets
    #   secretName: grafana-secret-files
    #   readOnly: true
    #   optional: false
    #   subPath: ""
    #
  extraVolumeMounts: []
    # - name: extra-volume-0
    #   mountPath: /mnt/volume0
    #   readOnly: true
    # - name: extra-volume-1
    #   mountPath: /mnt/volume1
    #   readOnly: true
    # - name: grafana-secrets
    #   mountPath: /mnt/volume2

  ## Additional Grafana server volumes
  extraVolumes: []
    # - name: extra-volume-0
    #   existingClaim: volume-claim
    # - name: extra-volume-1
    #   hostPath:
    #     path: /usr/shared/
    #     type: ""
    # - name: grafana-secrets
    #   csi:
    #     driver: secrets-store.csi.k8s.io
    #     readOnly: true
    #     volumeAttributes:
    #       secretProviderClass: "grafana-env-spc"

  plugins:
    - macropower-analytics-panel
    - azure-monitor-app
    - digrich-bubblechart-panel
    - golioth-websocket-datasource
    - snuids-trend-panel
    - serrrios-statusoverview-panel
    - innius-grpc-datasource
    - novatec-sdg-panel
    - integrationmatters-comparison-panel
    ## You can also use other plugin download URL, as long as they are valid zip files,
    ## and specify the name of the plugin after the semicolon. Like this:
    # - https://grafana.com/api/plugins/marcusolsson-json-datasource/versions/1.3.2/download;marcusolsson-json-datasource

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server.prometheus.svc.cluster.local
          access: proxy
          isDefault: true

  alerting: {}
    # policies.yaml:
    #   apiVersion: 1
    #   policies:
    #     - orgId: 1
    #       receiver: first_uid
    #
    # rules.yaml:
    #   apiVersion: 1
    #   groups:
    #     - orgId: 1
    #       name: '{{ .Chart.Name }}_my_rule_group'
    #       folder: my_first_folder
    #       interval: 60s
    #       rules:
    #         - uid: my_id_1
    #           title: my_first_rule
    #           condition: A
    #           data:
    #             - refId: A
    #               datasourceUid: '-100'
    #               model:
    #                 conditions:
    #                   - evaluator:
    #                       params:
    #                         - 3
    #                       type: gt
    #                     operator:
    #                       type: and
    #                     query:
    #                       params:
    #                         - A
    #                     reducer:
    #                       type: last
    #                     type: query
    #                 datasource:
    #                   type: __expr__
    #                   uid: '-100'
    #                 expression: 1==0
    #                 intervalMs: 1000
    #                 maxDataPoints: 43200
    #                 refId: A
    #                 type: math
    #           dashboardUid: my_dashboard
    #           panelId: 123
    #           noDataState: Alerting
    #           for: 60s
    #           annotations:
    #             some_key: some_value
    #           labels:
    #             team: sre_team_1
    #
    # contactpoints.yaml:
    #   secret:
    #     apiVersion: 1
    #     contactPoints:
    #       - orgId: 1
    #         name: cp_1
    #         receivers:
    #           - uid: first_uid
    #             type: pagerduty
    #             settings:
    #               integrationKey: XXX
    #               severity: critical
    #               class: ping failure
    #               component: Grafana
    #               group: app-stack
    #               summary: |
    #                 {{ `{{ include "default.message" . }}` }}
    #
    # templates.yaml:
    #   apiVersion: 1
    #   templates:
    #     - orgId: 1
    #       name: my_first_template
    #       template: |
    #         {{ `
    #         {{ define "my_first_template" }}
    #         Custom notification message
    #         {{ end }}
    #         ` }}
    #
    # mutetimes.yaml
    #   apiVersion: 1
    #   muteTimes:
    #     - orgId: 1
    #       name: mti_1
    #       # refer to https://prometheus.io/docs/alerting/latest/configuration/#time_interval-0
    #       time_intervals: {}

  ## Configure notifiers
  ## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
  ##
  notifiers: {}
  #  notifiers.yaml:
  #    notifiers:
  #    - name: email-notifier
  #      type: email
  #      uid: email1
  #      # either:
  #      org_id: 1
  #      # or
  #      org_name: Main Org.
  #      is_default: true
  #      settings:
  #        addresses: an_email_address@example.com
  #    delete_notifiers:

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

  dashboards:
    default:
      # https://grafana.com/grafana/dashboards/2-prometheus-stats/
      prometheus-stats:
        gnetId: 2
        revision: 2
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/14584-argocd/
      argocd:
        gnetId: 14584
        revision: 1
        datasnode-exporter-full:ource: Prometheus
      # https://grafana.com/grafana/dashboards/14981-coredns/
      core-dns:
        gnetId: 14981
        revision: 2
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/15661-1-k8s-for-prometheus-dashboard-20211010/
      k8s-for-prometheus:
        gnetId: 15661
        revision: 1
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/11835-redis-dashboard-for-prometheus-redis-exporter-helm-stable-redis-ha/
      redis-exporter:
        gnetId: 11835
        revision: 1
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/11454-k8s-storage-volumes-cluster/
      k8s-storage-volumes-cluster:
        gnetId: 11453
        revision: 14
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/9578-alertmanager/
      alertmanager:
        gnetId: 9578
        revision: 4
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/11001-cert-manager/
      cert-manager:
        gnetId: 11001
        revision: 1
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/315-kubernetes-cluster-monitoring-via-prometheus/
      kubernetes-cluster-monitoring:
        gnetId: 315
        revision: 3
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/13996-clusterpolicyreport-details/
      clusterpolicyreport:
        gnetId: 13996
        revision: 5
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/22302-kubernetes-ephemeral-storage/
      kubernetes-ephemeral-storage:
        gnetId: 22302
        revision: 1
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/10860-k8-resource-requests/
      k8-resource-requests:
        gnetId: 10860
        revision: 1
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/14055-loki-stack-monitoring-promtail-loki/
      loki-stack-monitoring:
        gnetId: 14055
        revision: 5
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/13332-kube-state-metrics-v2/
      kube-state-metrics-v2:
        gnetId: 13332
        revision: 12
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/17092-kubernetes-persistent-volumes/
      kubernetes-persistent-volumes:
        gnetId: 17092
        revision: 7
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/15244-kubernetes-capacity/
      kubernetes-capacity:
        gnetId: 15244
        revision: 3
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/14699-kubernetes-status/
      kubernetes-status:
        gnetId: 14699
        revision: 2
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/21700-kubernetes-deployment/
      kubernetes-deployment:
        gnetId: 21700
        revision: 1
        datasource: Prometheus
      # https://grafana.com/grafana/dashboards/10441-keycloak-metrics-dashboard/
      #keycloak-metrics:
      #  gnetId: 10441
      #  revision: 2
      #  datasource: Prometheus
      # https://grafana.com/grafana/dashboards/7645-istio-control-plane-dashboard/
      #itio-control-plane:
      #  gnetId: 7645
      #  revision: 240
      #  datasource: Prometheus
      # https://grafana.com/grafana/dashboards/1860-node-exporter-full/
      #node-exporter-full:
      #  gnetId: 1860
      #  revision: 37
      #  datasource: Prometheus
      # https://grafana.com/grafana/dashboards/13659-blackbox-exporter-http-prober/
      #blackbox-exporter-http:
      #  gnetId: 13659
      #  revision: 1
      #  datasource: Prometheus
        
    #   some-dashboard:
    #     json: |
    #       $RAW_JSON
    #   custom-dashboard:
    #     file: dashboards/custom-dashboard.json
    #   local-dashboard:
    #     url: https://example.com/repository/test.json
    #     token: ''
    #   local-dashboard-base64:
    #     url: https://example.com/repository/test-b64.json
    #     token: ''
    #     b64content: true
    #   local-dashboard-gitlab:
    #     url: https://example.com/repository/test-gitlab.json
    #     gitlabToken: ''

  ## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
  ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
  ## ConfigMap data example:
  ##
  ## data:
  ##   example-dashboard.json: |
  ##     RAW_JSON
  ##
  dashboardsConfigMaps: {}
  #  default: ""

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    server:
      domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ tpl (.Values.ingress.hosts | first) . }}{{ else }}''{{ end }}"

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  smtp:
    # `existingSecret` is a reference to an existing secret containing the smtp configuration
    # for Grafana.
    existingSecret: ""
    userKey: "user"
    passwordKey: "password"

  assertNoLeakedSecrets: true
