schema:
  env: minikube
  hostname: etcd.minikube.where-ever.net

etcd:
  global:
    defaultStorageClass: "nfs-client"

  clusterDomain: cluster.local

  diagnosticMode:
    enabled: false

  auth:
    rbac:
      create: true
      ## @param auth.rbac.allowNoneAuthentication Allow to use etcd without configuring RBAC authentication
      ##
      allowNoneAuthentication: true
      ## @param auth.rbac.existingSecret Name of the existing secret containing credentials for the root user
      existingSecret: "etcd-secrets"
      ## @param auth.rbac.existingSecretPasswordKey Name of key containing password to be retrieved from the existing secret
      existingSecretPasswordKey: "etcd-root-password"

    ## Authentication token
    token:
      enabled: false
      type: jwt
      privateKey:
        filename: jwt-token.pem
        existingSecret: ""
      signMethod: RS256
      ttl: 10m
    client:
      secureTransport: true
      useAutoTLS: false
      existingSecret: "etcd-client-tls"
      enableAuthentication: false
      certFilename: tls.crt
      certKeyFilename: tls.key
      caFilename: "ca.crt"

    peer:
      secureTransport: false
      useAutoTLS: false
      existingSecret: "etcd-server-tls"
      enableAuthentication: false
      certFilename: tls.crt
      certKeyFilename: tls.key
      caFilename: "ca.crt"

  configuration: ""
  existingConfigmap: ""
  ## @param extraEnvVars [array] Extra environment variables to be set on etcd container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param extraEnvVarsSecret Name of existing Secret containing extra env vars
  ##
  extraEnvVarsSecret: ""
  replicaCount: 3
  resourcesPreset: "micro"
  extraVolumes:
    - name: own-ca-bundle
      configMap:
        name: own-ca-bundle
        defaultMode: 0644
        optional: false
        items:
          - key: own-ca-bundle.pem
            path: ca-certificates.crt
  extraVolumeMounts:
    - mountPath: /etc/ssl/certs/
      name: own-ca-bundle
      readOnly: true

  service:
    type: ClusterIP
    enabled: true
    loadBalancerIP: ""
    loadBalancerClass: ""
    annotations: {}

  persistence:
    enabled: true
    storageClass: "nfs-client"
    accessModes:
      - ReadWriteOnce
    size: 8Gi

  metrics:
    enabled: true
    useSeparateEndpoint: false
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.useSeparateEndpoint | ternary .Values.containerPorts.metrics .Values.containerPorts.client }}"
    podMonitor:
      enabled: false
      namespace: monitoring
      additionalLabels: {}
      ## tlsConfig:
      ##   ca:
      ##     secret:
      ##       name: existingSecretName
      ##
      tlsConfig: {}
    prometheusRule:
      enabled: false
      namespace: ""
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      # - alert: ETCD has no leader
      #   annotations:
      #     summary: "ETCD has no leader"
      #     description: "pod {{`{{`}} $labels.pod {{`}}`}} state error, can't connect leader"
      #   for: 1m
      #   expr: etcd_server_has_leader == 0
      #   labels:
      #     severity: critical
      #     group: PaaS
      ##
      rules: []
  
  disasterRecovery:
    enabled: false

  serviceAccount:
    create: true
    automountServiceAccountToken: false
  
  preUpgradeJob:
    enabled: true
    annotations: {}
    podLabels: {}
    podAnnotations: {}
  
  ## @section Defragmentation parameters
  defrag:
    enabled: false
