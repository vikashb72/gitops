schema:
  env: minikube
  namespace: alloy-system

alloy:
  crds:
    create: true

  alloy:
    configMap:
      create: true
       -- Content to assign to the new ConfigMap.
        This is passed into `tpl` allowing for templating from values.
      content: |
        logging {
          level = "info"
          format = "logfmt"
          write_to = [loki.write.default.receiver]
        }

        loki.write "default" {
          endpoint {
            url = "http://loki-gateway.loki-system/loki/api/v1/push"
          }
        }

        loki.source.file "local" {
          targets = [
            {__path__ = "/tmp/foo.txt", "color" = "pink"},
            {__path__ = "/tmp/bar.txt", "color" = "blue"},
            {__path__ = "/tmp/baz.txt", "color" = "grey"},
          ]

          forward_to = [loki.write.default.receiver]
        }

        local.file_match "node_logs" {
          path_targets = [{
              __path__  = "/var/log/syslog",
              job       = "node/syslog",
              node_name = sys.env("HOSTNAME"),
              cluster   = "minikube",
          }]
        }

        loki.source.file "node_logs" {
          targets    = local.file_match.node_logs.targets
          forward_to = [loki.write.default.receiver]
        }

        discovery.kubernetes "pod" {
          role = "pod"
        }

        discovery.relabel "pod_logs" {
          targets = discovery.kubernetes.pod.targets

          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            action = "replace"
            target_label = "namespace"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            action = "replace"
            target_label = "pod"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "container"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
            action = "replace"
            target_label = "app"
          }

          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "job"
            separator = "/"
            replacement = "$1"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "__path__"
            separator = "/"
            replacement = "/var/log/pods/*$1/*.log"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_container_id"]
            action = "replace"
            target_label = "container_runtime"
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
          }
        }

        loki.source.kubernetes "pod_logs" {
          targets    = discovery.relabel.pod_logs.output
          forward_to = [loki.process.pod_logs.receiver]
        }

        loki.process "pod_logs" {
          stage.static_labels {
              values = {
                cluster = "minikube",
              }
          }

          forward_to = [loki.write.default.receiver]
        }

        loki.source.kubernetes_events "cluster_events" {
          job_name   = "integrations/kubernetes/eventhandler"
          log_format = "logfmt"
          forward_to = [
            loki.process.cluster_events.receiver,
          ]
        }

        loki.process "cluster_events" {
          forward_to = [loki.write.default.receiver]

          stage.static_labels {
            values = {
              cluster = "minikube",
            }
          }

          stage.labels {
            values = {
              kubernetes_cluster_events = "job",
            }
          }
        }

        prometheus.remote_write "default" {
          endpoint {
            url = "http://kube-prometheus-stack-prometheus.monitoring:9090/api/v1/write"
          }
        }

        prometheus.exporter.self "default" {
        }

        prometheus.scrape "default" {
          targets    = prometheus.exporter.self.default.targets
          forward_to = [prometheus.remote_write.default.receiver]
        }

        tracing {
          sampling_fraction = 0.1
          write_to          = [otelcol.exporter.otlp.default.input]
        }

        otelcol.exporter.otlp "default" {
          client {
            endpoint = "http://tempo-distributed-distributor.tempo-system:4317"
            tls {
               insecure = true
               insecure_skip_verify = true
            }
          }
        }

        otelcol.exporter.loki "default" {
          forward_to = [loki.write.default.receiver]
        }

        otelcol.receiver.otlp "default" {
          grpc {
            endpoint = "127.0.0.1:4317"
          }

          http {
            endpoint = "127.0.0.1:4318"
          }

          output {
            metrics = [otelcol.exporter.otlp.default.input]
            logs    = [otelcol.exporter.otlp.default.input]
            traces  = [otelcol.exporter.otlp.default.input]
          }
        }

        otelcol.processor.memory_limiter "default" {
          check_interval = "1s"
          limit          = "1GiB"

          output {
            metrics = [otelcol.processor.batch.default.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [otelcol.processor.batch.default.input]
          }
        }

        otelcol.processor.batch "default" {
          output {
            metrics = [otelcol.exporter.otlp.default.input]
            logs    = [otelcol.exporter.otlp.default.input]
            traces  = [otelcol.exporter.otlp.default.input]
          }
        }

    clustering:
      enabled: false

    enableReporting: false

    envFrom: []

    extraArgs: []

  configReloader:
    # -- Enables automatically reloading when the Alloy config changes.
    enabled: true

  service:
    enabled: true
    #type: ClusterIP

  serviceMonitor:
    enabled: false

  extraObjects: []
  # - apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: grafana-cloud
  #   stringData:
  #     PROMETHEUS_HOST: 'https://prometheus-us-central1.grafana.net/api/prom/push'
  #     PROMETHEUS_USERNAME: '123456'

