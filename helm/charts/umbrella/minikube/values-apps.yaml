schema:
  env: minikube
  hvault:
    external:
      addr: https://192.168.0.4:8443
  metadata:
    namespace: argocd
    finalisers: resources-finalizer.argocd.argoproj.io
  annotations:
    syncwave: "100"
  spec:
    project: minikube-applications
    repoURL: https://github.com/vikashb72/gitops.git
    targetRevision: HEAD
    destination:
      server: https://kubernetes.default.svc
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false

argocdManaged:
  umbrella-chart-apps:
    name: umbrella-chart-apps
    sources:
      - path: helm/charts/umbrella/minikube
        helm:
          valueFiles:
            - values-apps.yaml
    automated:
      allowEmpty: true
  cnpg:
    name: cnpg
    targetNamespace: cnpg-system
    sources:
      - path: helm/charts/cnpg
    syncOptions:
      ServerSideApply: true
  n8n:
    name: n8n
    targetNamespace: n8n-system
    sources:
      - path: helm/charts/n8n
        noHelmValues: true
      - repoURL: 8gears.container-registry.com/library
        chart: n8n
        targetRevision: 1.0.10
        helm:
          valueFiles:
            - $values/values-minikube.yaml
      - ref: values
        noHelmValues: true
    syncOptions:
      ServerSideApply: true
  #n8n:
  #  name: n8n
  #  targetNamespace: n8n-system
  #  sources:
  #    #- path: helm/charts/n8n
  #    - repoURL: 8gears.container-registry.com/library
  #      chart: n8n
  #      targetRevision: 1.0.10
  #      helm:
  #        valueFiles:
  #          - values.yaml
  #        valuesObject:
  #          main:
  #            config:
  #              n8n:
  #                editor_base_url: https://n8n.minikube.where-ever.net/
  #              db:
  #                type: postgresdb
  #                postgresdb:
  #                  host: db-rw
  #                  user: n8n
  #                  # password: password is read from cnpg db-app secretKeyRef
  #                  pool:
  #                    size: 10
  #                  ssl:
  #                    enabled: true
  #                    reject_Unauthorized: true
  #                    ca_file: "/home/ssl/certs/postgresql/ca.crt"
  #             webhook_url: https://n8n.minikube.where-ever.net/
  #             queue:
  #               health:
  #                 check:
  #                   active: true
  #               bull:
  #                 redis:
  #                   host: n8n-valkey-primary
  #                   port: 6379
  #            secret: {}
  #            extraEnv: &extraEnv
  #              DB_POSTGRESDB_PASSWORD:
  #                valueFrom:
  #                  secretKeyRef:
  #                    name: db-app
  #                    key: password
  #              #N8N_ENCRYPTION_KEY:
  #              #  valueFrom:
  #              #    secretKeyRef:
  #              #      name: app-password
  #              #      key: password
  #            extraVolumeMounts: &extraVolumeMounts
  #              - name: own-ca-bundle
  #                configMap:
  #                  name: own-ca-bundle
  #                  defaultMode: 0644
  #                  optional: false
  #                  items:
  #                    - key: own-ca-bundle.pem
  #                      path: ca-certificates.crt
  #              - name: db-ca-cert
  #                mountPath: /home/ssl/certs/postgresql
  #                readOnly: true
  #            extraVolumes: &extraVolumes
  #              - mountPath: /etc/ssl/certs/
  #                name: own-ca-bundle
  #                readOnly: true
  #              - name: db-ca-cert
  #                secret:
  #                  secretName: psql-tls
  #                  items:
  #                    - key: ca.crt
  #                      path: ca.crt
  #          worker:
  #            enabled: true
  #            extraEnv: *extraEnv
  #            extraVolumeMounts: *extraVolumeMounts
  #            extraVolumes: *extraVolumes
  #          webhook:
  #            enabled: true
  #            extraEnv: *extraEnv
  #            extraVolumeMounts: *extraVolumeMounts
  #            extraVolumes: *extraVolumes

  #          valkey:
  #            enabled: true
  #            architecture: standalone
  #            sentinel:
  #              enabled: false
  #            auth:
  #              enabled: false
  #            primary:
  #              kind: Deployment
  #              persistence:
  #                enabled: false
  #              resources:
  #                requests:
  #                  memory: 256Mi
  #                  cpu: 100m

  #          # cnpg DB cluster request
  #          extraManifests:
  #            - apiVersion: apiVersion: external-secrets.io/v1beta1
  #              kind: ExternalSecret
  #              metadata:
  #                name: db-app
  #                namespace: {{ $.Release.Namespace }}
  #              spec:
  #                refreshInterval: 4h
  #                secretStoreRef:
  #                  name: external-vault-backend
  #                  kind: ClusterSecretStore
  #                target:
  #                  name: db-app
  #                  creationPolicy: Owner
  #                  deletionPolicy: "Retain"
  #                data:
  #                  - secretKey: password
  #                    remoteRef:
  #                      conversionStrategy: Default
  #                      decodingStrategy: None
  #                      key: "kv/{{ .Values.schema.env }}/n8n/db-app"
  #                      metadataPolicy: None
  #                      property: password
  #            - apiVersion: cert-manager.io/v1
  #              kind: Certificate
  #              metadata:
  #                name: psql-certmanager-cert
  #                namespace: n8n-system
  #              spec:
  #                commonName: "*.n8n-system.svc.cluster.local"
  #                dnsNames:
  #                  - db-lb.internal.mydomain.net
  #                  - db-rw
  #                  - db-rw.n8n-system
  #                  - db-rw.n8n-system.svc
  #                  - db-rw.n8n-system.svc.cluster
  #                  - db-rw.n8n-system.svc.cluster.local
  #                  - db-r
  #                  - db-r.n8n-system
  #                  - db-r.n8n-system.svc
  #                  - db-r.n8n-system.svc.cluster
  #                  - db-r.n8n-system.svc.cluster.local
  #                  - db-ro
  #                  - db-ro.n8n-system
  #                  - db-ro.n8n-system.svc
  #                  - db-ro.n8n-system.svc.cluster
  #                  - db-ro.n8n-system.svc.cluster.local
  #                secretName: psql-tls
  #                privateKey:
  #                  algorithm: RSA
  #                  size: 2048
  #                issuerRef:
  #                  name: vault-cert-issuer
  #                  kind: ClusterIssuer
  #            - apiVersion: postgresql.cnpg.io/v1
  #              kind: Cluster
  #              metadata:
  #                name: db
  #              spec:
  #                instances: 1
  #                certificates:
  #                  serverTLSSecret: psql-tls
  #                  serverCASecret: psql-tls
  #                bootstrap:
  #                  initdb:
  #                    database: n8n
  #                    owner: n8n
  #                postgresql:
  #                  parameters:
  #                    shared_buffers: "64MB"
  #                resources:
  #                  requests:
  #                    memory: "512Mi"
  #                  limits:
  #                    memory: "512Mi"
  #                storage:
  #                  size: 1Gi
  #                  storageClass: nfs-client
  #    #   valueFiles: 
  #    #     - '$values/values-minikube.yaml'
  #    #- targetRevision: HEAD
  #    #  ref: values
  #    #  noHelmValues: true
  #echoserver:
  #  disable: true
  #  name: echoserver
  #  targetNamespace: echoserver
  #  sources:
  #    - path: helm/charts/echoserver
  #httpbin:
  #  disable: true
  #  name: httpbin
  #  targetNamespace: httpbin
  #  sources:
  #    - path: helm/charts/httpbin
  #redis:
  #  name: redis
  #  targetNamespace: redis
  #  sources:
  #    - path: helm/charts/redis
  #valkey:
  #  disable: true
  #  name: valkey
  #  targetNamespace: valkey
  #  sources:
  #    - path: helm/charts/valkey
  #strimzi-kafka-operator:
  #  name: strimzi-kafka-operator
  #  targetNamespace: kafka-system
  #  sources:
  #    - path: helm/charts/strimzi-kafka-operator
  #homepage:
  #  name: homepage
  #  targetNamespace: homepage
  #  sources:
  #    - path: helm/charts/homepage
  #kafka-ui:
  #  name: kafka-ui
  #  targetNamespace: kafka-ui
  #  sources:
  #    - path: helm/charts/kafka-ui
  #kafka-rest:
  #  name: kafka-rest
  #  targetNamespace: kafka-rest
  #  sources:
  #    - path: helm/charts/kafka-rest
  #mysql:
  #  disable: true
  #  name: mysql
  #  targetNamespace: mysql
  #  sources:
  #    - path: helm/charts/mysql
  #fleetdm:
  #  disable: true
  #  name: fleetdm
  #  targetNamespace: fleetdm
  #  sources:
  #    - path: helm/charts/fleetdm
  #consul:
  #  name: consul
  #  targetNamespace: consul
  #  sources:
  #    - path: helm/charts/hashicorp-consul
  #poc-nginx:
  #  name: poc
  #  targetNamespace: poc
  #  sources:
  #    - path: helm/charts/poc-nginx
#  keda:
#    disable: true
#    name: keda
#    targetNamespace: keda
#    sources:
#      - path: helm/charts/keda
#        noHelmValues: false
#        helm:
#          envFile: true
#    disableAutomated: false
#    automated: {}
#    syncOptions:
#      ServerSideApply: true
#  gha-runner-controller:
#    disable: true
#    name: gha-runner-controller
#    targetNamespace: gha-controller
#    sources:
#      - path: helm/charts/gha-runner-controller
#        noHelmValues: false
#        helm:
#          envFile: true
#    disableAutomated: false
#    automated: {}
#    syncOptions:
#      ServerSideApply: true
#  gha-runner-scale-set:
#    disable: true
#    name: gha-runner-scale-set
#    targetNamespace: gha-runners
#    sources:
#      - path: helm/charts/gha-runner-scale-set
#        noHelmValues: false
#        helm:
#          envFile: true
#    disableAutomated: false
#    automated: {}
