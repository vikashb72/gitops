schema:
  env: minikube

  bootstrap: false

  projects:
    minikube-infrastructure: Minikube Infrastructure
    minikube-applications: Minikube Applications
    minikube-in-cluster-storage: In Cluster Storage
    minikube-monitoring: Monitoring
    minikube-networking: Networking
    minikube-dev-tools: Dev Tools for testing

  serviceMonitor:
    templates: false

argo-cd:
  namespaceOverride: "argocd"

  crds:
    install: true

  openshift:
    enabled: false

  global:
    # -- Default domain used by all components
    # Used for ingresses, certificates, SSO, notifications, etc.
    domain: argocd.minikube.where-ever.net

    # an alternative to the ServiceMonitors
    addPrometheusAnnotations: false

  configs:
    cm:
      application.sync.impersonation.enabled: false
      accounts.argo-admin.enabled: "false"
      accounts.argo-admin: apiKey, login
      accounts.argo-readonly: apiKey, login
      accounts.argo-readonly.enabled: "true"
      resource.customizations.health.gloo.solo.io_Settings: |
        hs = {}
        hs.status = "Healthy"
        hs.message = "we are good"
        return hs

      url: https://argocd.minikube.where-ever.net
      dex.config: |
        connectors:
          - config:
              issuer: https://authentik.minikube.where-ever.net/application/o/argocd/
              clientID: $argocd-authentic-client:id
              clientSecret: $argocd-authentic-client:secret
              insecureEnableGroups: true
              scopes:
                - openid
                - profile
                - email
                - groups
            name: authentik
            type: oidc
            id: authentik

    params:
      server.insecure: true
      reposerver.parallelism.limit: 0
      server.disable.auth: false

    rbac:
      policy.default: ''
      policy.csv: |
        p, role:org-admin, applications, *, */*, allow
        p, role:org-admin, clusters, get, *, allow
        p, role:org-admin, repositories, *, *, allow
        p, role:org-admin, logs, get, *, allow
        p, role:org-admin, exec, create, */*, allow
        p, role:readonly, applications, get, *, allow
        g, ArgoCD Admins, role:org-admin
        g, ArgoCD Viewers, role:readonly

    credentialTemplates: {}
      # github-enterprise-creds-1:
      #   url: https://github.com/argoproj
      #   githubAppID: 1
      #   githubAppInstallationID: 2
      #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3
      #   githubAppPrivateKey: |
      #     -----BEGIN OPENSSH PRIVATE KEY-----
      #     ...
      #     -----END OPENSSH PRIVATE KEY-----

    credentialTemplatesAnnotations: {}

    repositories: {}
      # private-helm-repo:
      #   url: https://my-private-chart-repo.internal
      #   name: private-repo
      #   type: helm
      #   password: my-password
      #   username: my-username
      # private-repo:
      #   url: https://github.com/argoproj/private-repo

    secret:
      extra: {}
        # LDAP_PASSWORD: "mypassword"

  controller:
    metrics:
      enabled: true

      serviceMonitor:
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

      rules:
        enabled: false
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        spec:
          - alert: ArgoAppMissing
            expr: |
              absent(argocd_app_info) == 1
            for: 15m
            labels:
              severity: critical
            annotations:
              summary: "[Argo CD] No reported applications"
              description: >
                Argo CD has not reported any applications data for the past 15 minutes which
                means that it must be down or not functioning properly.  This needs to be
                resolved for this cloud to continue to maintain state.
          - alert: ArgoAppNotSynced
            expr: |
              argocd_app_info{sync_status!="Synced"} == 1
            for: 12h
            labels:
              severity: warning
            annotations:
              summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
              description: >
                The application [{{`{{$labels.name}}`}} has not been synchronized for over
                12 hours which means that the state of this cloud has drifted away from the
                state inside Git.

  dex:
    enabled: true

    metrics:
      enabled: true

      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

    volumeMounts: 
      - mountPath: /etc/ssl/certs/
        name: own-ca-bundle
        readOnly: true
  
    volumes: 
      - name: own-ca-bundle
        configMap:
          name: own-ca-bundle
          defaultMode: 0644
          optional: false
          items:
            - key: own-ca-bundle.pem
              path: ca-certificates.crt

  redis:
    enabled: true

    ## Prometheus redis-exporter sidecar
    exporter:
      enabled: true

    metrics:
      enabled: true

      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

  redisSecretInit:
    enabled: false

  server:
    env:
      - name: ARGOCD_MAX_CONCURRENT_LOGIN_REQUESTS_COUNT
        value: "0"

    extensions:
      enabled: false
      ## Ref: https://github.com/argoproj-labs/argocd-extension-metrics#install-ui-extension

      extensionList: []
      #  - name: extension-metrics
      #    env:
      #      - name: EXTENSION_URL
      #        value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.0/extension.tar.gz
      #      - name: EXTENSION_CHECKSUM_URL
      #        value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.0/extension_checksums.txt

    service:
      type: LoadBalancer
      loadBalancerIP: 192.168.49.233

    certificate:
      enabled: true
      duration: 2160h
      additionalHosts:
        - argocd-server
        - argocd-server.argocd
        - argocd-server.argocd.svc
        - argocd-server.argocd.svc.cluster
        - argocd-server.argocd.svc.cluster.local
        - localhost
      issuer:
        group: cert-manager.io
        kind: ClusterIssuer
        name: vault-cert-issuer
      usages:
        - digital signature
        - key encipherment
    metrics:
      enabled: true

      serviceMonitor:  
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

  repoServer:
    metrics:
      enabled: true

      serviceMonitor:  
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

  applicationSet:
    metrics:
      enabled: true

      serviceMonitor:  
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

  notifications:
    enabled: true

    metrics:
      enabled: true

      serviceMonitor:  
        enabled: true
        namespace: "monitoring"
        selector:
          prometheus: kube-prometheus-stack
        additionalLabels:
          release: kube-prometheus-stack

argo-workflows:
  namespaceOverride: "argocd"

  workflow:
    serviceAccount:
      create: true
      name: "argo-workflow"

    rbac:
      create: true

  controller:
    workflowDefaults:
      spec:
        serviceAccountName: argo-workflow

  metricsConfig:
    enabled: true
