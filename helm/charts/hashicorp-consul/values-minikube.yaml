schema:
  env: minikube

consul:
  global:
    enabled: true
  
    logLevel: "info"
  
    logJSON: false
  
    datacenter: minikube

    secretsBackend:
      vault:
        enabled: false
  
    gossipEncryption:
      autoGenerate: false
      secretName: ""
      # encryption key.
      secretKey: ""
  
    # Enables [TLS](https://developer.hashicorp.com/consul/tutorials/security/tls-encryption-secure)
    # across the cluster to verify authenticity of the Consul servers and clients.
    # Requires Consul v1.4.1+.
    tls:
      # If true, the Helm chart will enable TLS for Consul
      # servers and clients and all consul-k8s-control-plane components, as well as generate certificate
      # authority (optional) and server and client certificates.
      # This setting is required for [Cluster Peering](https://developer.hashicorp.com/consul/docs/connect/cluster-peering/k8s).
      enabled: false
  
      # both clients and servers and to only accept HTTPS connections.
      httpsOnly: true
  
    # Configure ACLs.
    acls:
      manageSystemACLs: true
  
      resources:
        requests:
          memory: "50Mi"
          cpu: "50m"
        limits:
          memory: "50Mi"
          cpu: "50m"
  
    # If argocd.enabled is set to true, following annotations are added to
    # job - server-acl-init-job
    # annotations -
    #   argocd.argoproj.io/hook: Sync
    #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd:
      enabled: true
  
    federation:
      enabled: false
  
    # Configures metrics for Consul service mesh
    metrics:
      enabled: false
  
      # Configures consul agent metrics. Only applicable if
      # `global.metrics.enabled` is true.
      # @type: boolean
      enableAgentMetrics: false
  
      # Configures consul agent underlying host metrics. Default is false.
      # Only applicable if `global.metrics.enabled` and `global.metrics.enableAgentMetrics` is true.
      # @type: boolean
      enableHostMetrics: false
  
      enableGatewayMetrics: false
  
      enableTelemetryCollector: false
  
      # Configures the list of filter rules to apply for allowing or blocking
      # metrics by prefix in the following format:
      #
      # A leading "+" will enable any metrics with the given prefix, and a leading "-" will block them.
      # If there is overlap between two rules, the more specific rule will take precedence.
      # Blocking will take priority if the same prefix is listed multiple times.
      prefixFilter:
        # @type: array<string>
        allowList: []
        # @type: array<string>
        blockList: []
  
        # Configures Kubernetes Prometheus/OpenMetrics auto-discovery annotations for use with Datadog.
        # This configuration is less common and more for advanced usage with custom metrics monitoring
        # configurations. Refer to the [Datadog documentation](https://docs.datadoghq.com/containers/kubernetes/prometheus/?tab=kubernetesadv2) for more details.
        openMetricsPrometheus:
          # @default: false
          # @type: boolean
          enabled: false
  
        otlp:
          # Enables forwarding of Consul's Telemetry Collector OTLP metrics for
          # ingestion by Datadog Agent.
          # @default: false
          # @type: boolean
          enabled: false
          # Protocol used for DataDog Endpoint OTLP ingestion.
          #
          # Valid protocol options are one of either:
          #
          #   - "http": will forward to DataDog HTTP OTLP Node Agent Endpoint default - "0.0.0.0:4318"
          #   - "grpc": will forward to DataDog gRPC OTLP Node Agent Endpoint default - "0.0.0.0:4317"
          #
          # @default: "http"
          # @type: string
          protocol: "http"
  
    openshift:
      enabled: false
  
    cloud:
      enabled: false
  
    trustedCAs: [
        |
        -----BEGIN CERTIFICATE-----
        MIIB5TCCAYugAwIBAgIQcAQz8xHcIAJYlklLVLQAUDAKBggqhkjOPQQDAjBQMQsw
        CQYDVQQGEwJaQTEYMBYGA1UEChMPV2hlcmUtZXZlciBIb21lMScwJQYDVQQDEx5X
        aGVyZS1ldmVyIEhvbWUgUm9vdCBDQSAoMjAyNSkwIBcNMjUwMTI0MDg0ODE0WhgP
        MjA1NTAxMTcwODQ4MTRaMFAxCzAJBgNVBAYTAlpBMRgwFgYDVQQKEw9XaGVyZS1l
        dmVyIEhvbWUxJzAlBgNVBAMTHldoZXJlLWV2ZXIgSG9tZSBSb290IENBICgyMDI1
        KTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABAVuDgS5oJh2QLiL9K5xdGWTOFZI
        qJ6g3NwTDci7SOAFr0PRQqj9qsH9IWkIU/0Td4Q/K2kx5gtDumVmS1Xw6ySjRTBD
        MA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgEDMB0GA1UdDgQWBBRe
        E/ehBwe41b0EzoVFkMgAOaW07TAKBggqhkjOPQQDAgNIADBFAiEAzbvwR4ZK5Ryc
        92+bPx0nEQh5Bvwp/x1/lXLsqJgGk3YCIF007aY1cb1qtXo+Yi7T1TramOPNsvbX
        STuhExnRnQ2d
        -----END CERTIFICATE-----
    ]
  
  # Server, when enabled, configures a server cluster to run. This should
  # be disabled if you plan on connecting to a Consul cluster external to
  # the Kube cluster.
  server:
    enabled: true
  
    replicas: 1
  
    # This defines the disk size for configuring the
    storage: 10Gi
    storageClass: nfs-client
  
    resources:
      requests:
        memory: "200Mi"
        cpu: "100m"
      limits:
        memory: "200Mi"
        cpu: "100m"
  
  externalServers:
    enabled: false
  
  client:
    # If true, the chart will install all
    # the resources necessary for a Consul client on every Kubernetes node. This _does not_ require
    # `server.enabled`, since the agents can be configured to join an external cluster.
    # @type: boolean
    enabled: false
  
  dns:
    # @type: boolean
    enabled: false
  
  ui:
    enabled: true
  
    metrics:
      enabled: false
      provider: "prometheus"
  
      # baseURL is the URL of the prometheus server, usually the service URL.
      # This value is only used if `ui.enabled` is set to true.
      # @type: string
      baseURL: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/
  
    dashboardURLTemplates:
      # Sets [`dashboardURLTemplates.service`](https://developer.hashicorp.com/consul/docs/agent/config/config-files#ui_config_dashboard_url_templates_service).
      service: ""
  
  syncCatalog:
    enabled: false
  
  connectInject:
    enabled: false
  
  meshGateway:
    enabled: false
  
  ingressGateways:
    enabled: false
  
  webhookCertManager:
    tolerations: null
  
  # Configures a demo Prometheus installation.
  prometheus:
    enabled: false
  
  tests:
    enabled: false
  
  telemetryCollector:
    enabled: false
