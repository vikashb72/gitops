env:
  extAuthz: false

base:
  global:
    istioNamespace: istio-system

  base:
    enableCRDTemplates: true

  profile: ambient

  defaultRevision: "default"

istiod:
  profile: ambient

  cni:
    enabled: false

  istiodRemote:
    enabled: false

  telemetry:
    enabled: true

    v2:
      enabled: true

      prometheus:
        enabled: true

  revision: ""

  global:
    istioNamespace: istio-system

    logAsJson: false

    proxy:
      logLevel: debug

    logging:
      level: "default:debug"

    omitSidecarInjectorConfigMap: false

  meshConfig:
    enablePrometheusMerge: true
    extensionProviders:
      - name: authentik
        envoyExtAuthzHttp:
          headersToDownstreamOnAllow:
            - cookie
          headersToUpstreamOnAllow:
            - set-cookie
            - x-authentik-*
          includeRequestHeadersInCheck:
            - cookie
          pathPrefix: /outpost.goauthentik.io/auth/envoy
          service: authentik-server.authentik.svc.cluster.local
          port: 80
      #- name: "zitadel-ext-authz"
      #  envoyExtAuthzHttp:
      #    service: zitadel.zitadel.svc.cluster.local
      #    port: 8080 
      #- name: "oauth2-proxy"
      #  envoyExtAuthzHttp:
      #    service: "oauth2-proxy.oauth2-proxy.svc.cluster.local"
      #    port: "4180" # The default port used by oauth2-proxy.
      #    includeRequestHeadersInCheck: ["authorization", "cookie"] # headers sent to the oauth2-proxy in the check request.
      #    headersToUpstreamOnAllow: ["authorization", "path", "x-auth-request-user", "x-auth-request-email", "x-auth-request-access-token"] # headers sent to backend application when request is allowed.
      #    headersToDownstreamOnAllow: ["set-cookie"] # headers sent back to the client when request is allowed.
      #    headersToDownstreamOnDeny: ["content-type", "set-cookie"] # headers sent back to the client when request is denied.
      #- name: "ext-authz-grpc"
      #  envoyExtAuthzGrpc:
      #    service: "ext-authz.istio-system.svc.cluster.local"
      #    port: "9000"
      #- name: "ext-authz-http"
      #  envoyExtAuthzHttp:
      #    service: "ext-authz.istio-system.svc.cluster.local"
      #    port: "8000"
      #    includeRequestHeadersInCheck: ["x-ext-authz"]

  volumes:
    - name: own-ca-bundle
      configMap:
        name: own-ca-bundle
        defaultMode: 0644
        optional: false
        items:
        - key: own-ca-bundle.pem
          path: ca-certificates.crt

  volumeMounts:
    - mountPath: /etc/ssl/certs/
      name: own-ca-bundle
      readOnly: true

cni:
  profile: ambient

  ambient:
    enabled: true

ztunnel:
  profile: ambient

#fleetGateway:
#  name: "fleet-gateway"
#  profile: ambient
#
#  service:
#    type: LoadBalancer
#    loadBalancerIP: 192.168.49.250
#    annotations:
#      metallb.universe.tf/address-pool: default
#
#  volumes:
#    - name: own-ca-bundle
#      configMap:
#        name: own-ca-bundle
#        defaultMode: 0644
#        optional: false
#        items:
#        - key: own-ca-bundle.pem
#          path: ca-certificates.crt
#
#  volumeMounts:
#    - mountPath: /etc/ssl/certs/
#      name: own-ca-bundle
#      readOnly: true

appGateway:
  name: "app-gateway"
  profile: ambient

  service:
    type: LoadBalancer
    loadBalancerIP: 192.168.49.251
    annotations:
      metallb.universe.tf/address-pool: default

  volumes:
    - name: own-ca-bundle
      configMap:
        name: own-ca-bundle
        defaultMode: 0644
        optional: false
        items:
        - key: own-ca-bundle.pem
          path: ca-certificates.crt

  volumeMounts:
    - mountPath: /etc/ssl/certs/
      name: own-ca-bundle
      readOnly: true

infraGateway:
  name: "infra-gateway"
  profile: ambient

  service:
    type: LoadBalancer
    loadBalancerIP: 192.168.49.252
    annotations:
      metallb.universe.tf/address-pool: default
    ports:
      - name: status-port
        port: 15021
        protocol: TCP
        targetPort: 15021
      - name: http2
        port: 80
        protocol: TCP
        targetPort: 80
      - name: https
        port: 443
        protocol: TCP
        targetPort: 443
      - name: etcd
        port: 2379
        protocol: TCP
        targetPort: 2379

  volumes:
    - name: own-ca-bundle
      configMap:
        name: own-ca-bundle
        defaultMode: 0644
        optional: false
        items:
        - key: own-ca-bundle.pem
          path: ca-certificates.crt

  volumeMounts:
    - mountPath: /etc/ssl/certs/
      name: own-ca-bundle
      readOnly: true

kiali-server:
  external_services:
    custom_dashboards:
      enabled: true
  identity: {}
    #cert_file:
    #private_key_file:
  
  login_token:
    signing_key: ""
  
  server:
    port: 20001
    #node_port:
    observability:
      metrics:
        enabled: true
        port: 9090
    web_root: ""
