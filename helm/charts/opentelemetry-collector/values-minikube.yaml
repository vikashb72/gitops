schema:
  env: minikube
  namespace: opentelemetry-system

opentelemetry-collector:
  # Valid values are "daemonset", "deployment", and "statefulset".
  mode: "daemonset"

  image:
    repository: "otel/opentelemetry-collector-k8s"

  presets:
    # Configures the collector to collect logs.
    # Adds the filelog receiver to the logs pipeline
    # and adds the necessary volumes and volume mounts.
    # Best used with mode = daemonset.
    logsCollection:
      enabled: true
      includeCollectorLogs: false
      storeCheckpoints: false
      # Once the size exceeds the limit, all received entries of the source will be combined and flushed.
      maxRecombineLogSize: 102400
    # Configures the collector to collect host metrics.
    # Adds the hostmetrics receiver to the metrics pipeline
    # and adds the necessary volumes and volume mounts.
    # Best used with mode = daemonset.
    # See https://opentelemetry.io/docs/kubernetes/collector/components/#host-metrics-receiver for details on the receiver.
    hostMetrics:
      enabled: false
    # Configures the Kubernetes Processor to add Kubernetes metadata.
    # Best used with mode = daemonset.
    kubernetesAttributes:
      enabled: false
    # Configures the collector to collect node, pod, and container metrics from the API server on a kubelet..
    # Best used with mode = daemonset.
    kubeletMetrics:
      enabled: false
    # Configures the collector to collect kubernetes events.
    # Best used with mode = deployment or statefulset.
    kubernetesEvents:
      enabled: false
    # Configures the Kubernetes Cluster Receiver to collect cluster-level metrics.
    # Best used with mode = deployment or statefulset.
    clusterMetrics:
      enabled: false

  configMap:
    create: true

  # Base collector configuration.
  # Supports templating. To escape existing instances of {{ }}, use {{` <original content> `}}.
  # For example, {{ REDACTED_EMAIL }} becomes {{` {{ REDACTED_EMAIL }} `}}.
  config:
    exporters:
      otlphttp/loki:
        endpoint: http://loki-gateway.loki-system/loki/api/v1/push
    service:
      pipelines:
        logs:
          exporters: [otlphttp/loki]

  service:
    enabled: true
    type: ClusterIP
    # type: LoadBalancer
    # loadBalancerIP: 1.2.3.4
    # loadBalancerSourceRanges: []

  podMonitor:
    enabled: false

  serviceMonitor:
    enabled: false

  prometheusRule:
    enabled: false
    groups: []
    # Create default rules for monitoring the collector
    defaultRules:
      enabled: false

    # additional labels for the PrometheusRule
    extraLabels: {}

  networkPolicy:
    enabled: false
