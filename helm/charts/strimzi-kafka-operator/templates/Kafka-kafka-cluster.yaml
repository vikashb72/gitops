apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: "{{ .Values.cluster.name }}"
  namespace: {{ .Release.Namespace }}
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
{{- with .Values.cluster.kafka.clusterCa }}
  clusterCa:
{{- toYaml . | nindent 4 }}
{{- end }}
{{- with .Values.cluster.kafka.clientsCa }}
  clientsCa:
{{- toYaml . | nindent 4 }}
{{- end }}
  entityOperator:
    topicOperator: {}
    userOperator: {}
  cruiseControl: {}
  kafka:
    config:
      default.replication.factor: 3
      min.insync.replicas: 2
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      unclean.leader.election.enable: false
{{- if .Values.schema.auth }}
    authorization:
      #type: simple
      type: opa
{{- end }}
    jvmOptions:
      -Xms: {{ .Values.cluster.kafka.jvmOptions.xms }}
      -Xmx: {{ .Values.cluster.kafka.jvmOptions.xmx }}
    replicas: {{ .Values.cluster.kafka.replicas }}
    version: {{ .Values.cluster.kafka.version }}
    metadataVersion: "{{ .Values.cluster.kafka.metadataVersion }}"
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: INFO
        log4j.logger.io.strimzi: "DEBUG"
        log4j.logger.kafka: "DEBUG"
        log4j.logger.org.apache.kafka: "DEBUG"
{{- with .Values.cluster.kafka.resources }}
    resources:
{{- toYaml . | nindent 6 }}
{{- end }}
    readinessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 10
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 10
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
{{- if .Values.schema.tls }}
      - name: tls
        port: 9093
        type: internal
        tls: true
{{- else }}
      - name: plain
        port: 9093
        type: internal
{{- end }}
{{- if .Values.schema.auth }}
        authentication:
          type: scram-sha-512
{{- end }}
{{- if and .Values.cluster.kafka.external_listener .Values.cluster.kafka.external_listener.enabled }}
      - name: external
        port: {{ default 9094 .Values.cluster.kafka.external_listener.port }}
        type: {{ default "loadbalancer" .Values.cluster.kafka.external_listener.type }}
        tls: {{ default false .Values.cluster.kafka.external_listener.tls }}
{{- if .Values.schema.auth }}
        authentication:
          type: scram-sha-512
{{- end }}
        configuration:
          bootstrap:
  {{- if .Values.cluster.kafka.external_listener.annotations }}
            annotations:
    {{- range .Values.cluster.kafka.external_listener.annotations }}
              {{ . }}
    {{- end }}
  {{- end }}
          brokers:
{{- $count := (.Values.cluster.kafka.replicas | int) }}
  {{- range until $count }}
            - broker: {{.}}
    {{- if $.Values.cluster.kafka.external_listener.annotations }}
              annotations:
      {{- range $annotation := $.Values.cluster.kafka.external_listener.annotations }}
                {{.}}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    template:
      pod:
        metadata:
          labels:
            kafka-metrics: 'true'

  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
    template:
      pod:
        metadata:
          labels:
            kafka-metrics: 'true'

  cruiseControl:
    config:
      webserver.security.enable: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: cruise-control-metrics.yml
