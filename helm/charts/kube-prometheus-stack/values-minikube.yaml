schema:
  env: minikube
  namespace: monitoring
  bootstrap: false

kube-prometheus-stack:
  crds:
    enabled: true

  # Create default rules for monitoring the cluster
  defaultRules:
    create: true

    rules:
      #etcd: true   # looking for kube-etcd
      #kubeSchedulerAlerting: true
      #kubeSchedulerRecording: true
      windows: false

    disabled:
      NodeRAIDDegraded: true

  additionalPrometheusRulesMap: {}
  #  rule-name:
  #    groups:
  #    - name: my_group
  #      rules:
  #      - record: my_record
  #        expr: 100 * my_record

  windowsMonitoring:
    enabled: false

  prometheus-windows-exporter:
    prometheus:
      monitor:
        enabled: false

  alertmanager:
    enabled: true

    config:
      route:
        group_by: ['namespace']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: "email-alert"
        routes:
          - receiver: "null"
            matchers:
              alertname: "Watchdog"
          - receiver: "email-alert"
            continue: true
          - receiver: "dev-email-alert"
            matchers:
              - namespace = httpbin|echoserver
                severity  =~ error

      receivers:
        - name: "null"
        - name: "email-alert"
          email_configs:
            - to: "ops@home.where-ever.za.net"
              from: "monitor@minikube.where-ever.net"
              smarthost: "mailhog.dev-tools.svc.cluster.local:1025"
              #smarthost: "odroid-dlna.home.where-ever.za.net:25"
              #auth_username: "vmail"
              #auth_password_file: /etc/alertmanager/secrets/GF_SMTP_PASSWORD
              #auth_password:
              require_tls: false
              send_resolved: true
        - name: "dev-email-alert"
          email_configs:
            - to: "dev@home.where-ever.za.net"
              from: "monitor@minikube.where-ever.net"
              smarthost: "mailhog.dev-tools.svc.cluster.local:1025"
              #auth_username: "vmail"
              #auth_password_file: /etc/alertmanager/secrets/GF_SMTP_PASSWORD
              #auth_password:
              require_tls: false
        # https://prometheus.io/docs/alerting/latest/configuration/#email_config
        #- name: "msteams"
        #  msteamsv2_configs:
        #    - send_resolved: true
        #      webhook_url_file: /etc/alertmanager/secrets/GF_MS_TEAMS_URL

      templates:
        - '/etc/alertmanager/config/*.tmpl'

    service:
      type: ClusterIP

    ## Configuration for Alertmanager service
    alertmanagerSpec:
      persistentVolumeClaimRetentionPolicy:
        whenDeleted: Delete
        whenScaled: Retain

      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

      volumes:
        - name: prometheus-alerting-config
          secret:
            secretName: prometheus-alerting-config
        - name: own-ca-bundle
          configMap:
            name: own-ca-bundle
            defaultMode: 0644
            optional: false
            items:
            - key: own-ca-bundle.pem
              path: ca-certificates.crt

      volumeMounts:
        - name: prometheus-alerting-config
          mountPath: /etc/alertmanager/secrets
          readOnly: true
        - mountPath: /etc/ssl/certs/
          name: own-ca-bundle
          readOnly: true

  grafana:
    enabled: true
    #env:
    #  GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: true
    #envValueFrom:
    #  GF_SECURITY_ADMIN_USER:
    #    secretKeyRef:
    #      name: grafana-admin-credentials
    #      key: GF_SECURITY_ADMIN_USER
    #  GF_SECURITY_ADMIN_PASSWORD:
    #    secretKeyRef:
    #      name: grafana-admin-credentials
    #      key: GF_SECURITY_ADMIN_PASSWORD
    #  GF_SMTP_ENABLED:
    #    secretKeyRef:
    #      name: prometheus-alerting-config
    #      key: GF_SMTP_ENABLED
    #  GF_SMTP_HOST:
    #    secretKeyRef:
    #      name: prometheus-alerting-config
    #      key: GF_SMTP_HOST
    #  GF_SMTP_USER:
    #    secretKeyRef:
    #      name: prometheus-alerting-config
    #      key: GF_SMTP_USER
    #  GF_SMTP_PASSWORD:
    #    secretKeyRef:
    #      name: prometheus-alerting-config
    #      key: GF_SMTP_PASSWORD
    #  GF_SMTP_FROM_ADDRESS:
    #    secretKeyRef:
    #      name: prometheus-alerting-config
    #      key: GF_SMTP_FROM_ADDRESS
    #  GF_SMTP_STARTTLS_POLICY:
    #    secretKeyRef:
    #      name: prometheus-alerting-config
    #      key: GF_SMTP_STARTTLS_POLICY
    #envFromSecret: "grafana-admin-credentials"
    #adminUser: admin
    #adminPassword: ""
    #admin:
    #  existingSecret: "grafana-admin-credentials"
    #  userKey: GF_SECURITY_ADMIN_USER
    #  passwordKey: GF_SECURITY_ADMIN_PASSWORD
    #namespaceOverride: "monitoring"
    defaultDashboardsEditable: true

    extraSecretMounts:
      - name: auth-generic-oauth-secret-mount
        secretName: grafana-authentik-client
        defaultMode: 0440
        mountPath: /etc/secrets/auth_generic_oauth
        readOnly: true

    extraVolumeMounts:
      - mountPath: /etc/ssl/certs/
        name: own-ca-bundle
        readOnly: true

    extraVolumes:
      - name: own-ca-bundle
        configMap:
          name: own-ca-bundle
          defaultMode: 0644
          optional: false
          items:
          - key: own-ca-bundle.pem
            path: ca-certificates.crt

    smtp:
      enabled: true
      existingSecret: "prometheus-alerting-config"
      passwordKey: "GF_SMTP_PASSWORD"
      userKey: "GF_SMTP_USER"

    grafana.ini:
      server:
        root_url: https://grafana.minikube.where-ever.net/
      auth:
        signout_redirect_url: "https://authentik.minikube.where-ever.net/application/o/grafana/end-session/"
        oauth_auto_login: false
      "auth.generic_oauth":
        name: authentik
        enabled: true
        client_id: $__file{/etc/secrets/auth_generic_oauth/id}
        client_secret: $__file{/etc/secrets/auth_generic_oauth/secret}
        scopes: "openid profile email"
        auth_url: "https://authentik.minikube.where-ever.net/application/o/authorize/"
        token_url: "https://authentik.minikube.where-ever.net/application/o/token/"
        api_url: "https://authentik.minikube.where-ever.net/application/o/userinfo/"
        # Optionally map user groups to Grafana roles
        role_attribute_path: contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'
        allow_assign_grafana_admin: true
      unified_alerting:
        enabled: true
      smtp:
        enabled: true
        host: desktop.home.where-ever.za.net:587
        startTLS_policy: "MandatoryStartTLS"
        from_address: monitor@minikube.where-ever.net
        skip_verify: true # for minikube
      security:
        disable_initial_admin_creation: true
      users:
        auto_assign_org: true
        auto_assign_org_id: 1

    notifiers:
      notifiers.yaml:
        notifiers:
          - name: alertmanager-operated
            type: prometheus-alertmanager
            uid: alertmanager-operated
            org_id: 1
            is_default: true
            settings:
              url: http://alertmanager-operated:9093/
              #basicAuthPassword:
              #basicAuthUser: admin
          - name: email-notifier
            type: email
            uid: email-notifier
            org_id: 1
            is_default: false
            settings:
              addresses: vikashb@home.where-ever.za.net

    alerting:
      policies.yaml:
        apiVersion: 1

        policies:
          - orgId: 1
            receiver: alertmanager-operated
            #receiver: default-notification-email
            group_by:
              - grafana_folder
              - alertname

      contactpoints.yaml:
        secret:
          apiVersion: 1

          contactPoints:
            - orgId: 1
              name: alertmanager-operated
              receivers:
                - uid: alertmanager-operated
                  type: prometheus-alertmanager
                  settings:
                    #basicAuthPassword:
                    #basicAuthUser: admin
                    url: http://alertmanager-operated:9093/
                  disableResolveMessage: false
            - orgId: 1
              name: default-notification-email
              receivers:
                - uid: default-notification-email
                  type: email
                  settings:
                    addresses: vikashb@home.where-ever.za.net
                    singleEmail: false
                  disableResolveMessage: false
            #- orgId: 1
            #  name: ms-teams-channel
            #  receivers:
            #    - uid: ms-teams-channel
            #      type: teams
            #      settings:
            #        url: https://localhost/
            #      disableResolveMessage: false

    serviceMonitor:
      enabled: true

    persistence:
      enabled: true
      type: pvc
      storageClassName: nfs-client
      size: 32Gi
      lookupVolumeName: true

      accessModes:
        - ReadWriteOnce

      finalizers:
        - kubernetes.io/pvc-protection

      inMemory:
        enabled: false

    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: "1"
        # Allow discovery in all namespaces for dashboards
        searchNamespace: ALL

        # Support for new table panels, 
        # when enabled grafana auto migrates the old table panels 
        # to newer table panels
        enableNewTablePanelSyntax: false

      datasources:
        enabled: true
        defaultDatasourceEnabled: true
        isDefaultDatasource: true

        name: Prometheus
        uid: prometheus
        exemplarTraceIdDestinations: {}
          # datasourceUid: Jaeger
          # traceIdLabelName: trace_id
          # urlDisplayLabel: View traces

        alertmanager:
          enabled: true
          name: Alertmanager
          uid: alertmanager
          handleGrafanaManagedAlerts: true
          implementation: prometheus

    service:
      enabled: true

    serviceMonitor:
      enabled: true

    additionalDataSources:
      - name: Loki
        type: loki
        url: http://loki-gateway.loki-system/
        access: proxy
        isDefault: false
        jsonData:
          tlsSkipVerify: true
          httpHeaderName1: 'X-Scope-OrgID'
      - name: Tempo
        type: tempo
        url: http://tempo-distributed-query-frontend.tempo-system:3100
        isDefault: false
        jsonData:
          tlsSkipVerify: true                                                   

    plugins:
      - macropower-analytics-panel
      - azure-monitor-app
      - digrich-bubblechart-panel
      - golioth-websocket-datasource
      - snuids-trend-panel
      - serrrios-statusoverview-panel
      - innius-grpc-datasource
      - novatec-sdg-panel
      - integrationmatters-comparison-panel
      # Refusing to initialize plugin because it's using Angular
      #- grafana-piechart-panel
      ## You can also use other plugin download URL, as long as they are valid zip files,
      ## and specify the name of the plugin after the semicolon. Like this:
      # - https://grafana.com/api/plugins/marcusolsson-json-datasource/versions/1.3.2/download;marcusolsson-json-datasource

    dashboardProviders:
      additionaldashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

    dashboards:
      default:
        istio-control-plane:
          gnetId: 7645
          revision: 247
          datasource: Prometheus
        istio-control-plane:
          #https://grafana.com/grafana/dashboards/7645-istio-control-plane-dashboard/
          gnetId: 7645
          revision: 247
          datasource: Prometheus
        istio-mesh:
          #https://grafana.com/grafana/dashboards/7639-istio-mesh-dashboard/
          gnetId: 7639
          revision: 247
          datasource: Prometheus
        istio-performance:
          #https://grafana.com/grafana/dashboards/11829-istio-performance-dashboard/
          gnetId: 11829
          revision: 247
          datasource: Prometheus
        istio-service:
          #https://grafana.com/grafana/dashboards/7636-istio-service-dashboard/
          gnetId: 7636
          revision: 247
          datasource: Prometheus
        istio-workload:
          #https://grafana.com/grafana/dashboards/7630-istio-workload-dashboard/
          gnetId: 7630
          revision: 247
          datasource: Prometheus
        redis-exporter:
          gnetId: 11835
          revision: 1
          datasource: Prometheus
        istio-ztunnel:
          #https://grafana.com/grafana/dashboards/21306-istio-ztunnel-dashboard/
          gnetId: 21306
          revision: 14
          datasource: Prometheus
        argocd-app-overview:
          #https://grafana.com/grafana/dashboards/19974-argocd-application-overview/
          gnetId: 19974
          revision: 3
          datasource: Prometheus
        argocd-operational-overview:
          #https://grafana.com/grafana/dashboards/19993-argocd-operational-overview/
          gnetId: 19993
          revision: 3
          datasource: Prometheus
        argocd-notifications-overview:
          #https://grafana.com/grafana/dashboards/19975-argocd-notifications-overview/
          gnetId: 19975
          revision: 3
          datasource: Prometheus
        argocd:
          #url: https://raw.githubusercontent.com/argoproj/argo-cd/refs/heads/master/examples/dashboard.json
          gnetId: 22576
          revision: 1
          datasource: Prometheus
        vpa-recommendations:
          #https://grafana.com/grafana/dashboards/14588-vpa-recommendations/
          gnetId: 14588
          revision: 5
          datasource: Prometheus
        # need to fix
        #cert-manager-2:
        #  #https://grafana.com/grafana/dashboards/20850-cert-manager/
        #  gnetId: 20850
        #  revision: 1
        #  datasource: Prometheus
        #keycloak-metrics:
        #  gnetId: 10441
        #  revision: 2
        #  datasource: Prometheus

  kubernetesServiceMonitors:
    enabled: true

  kubeApiServer:
    enabled: true

    tlsConfig:
      serverName: kubernetes
      insecureSkipVerify: false

  kubelet:
    enabled: true

    namespace: kube-system

    serviceMonitor:
      kubelet: true

  kubeControllerManager:
    enabled: false

    service:
      enabled: false

    serviceMonitor:
      enabled: false

  coreDns:
    enabled: true

    service:
      enabled: true

      ipDualStack:
        enabled: false

    serviceMonitor:
      enabled: true

  kubeDns:
    enabled: false

    service:
      ipDualStack:
        enabled: false

  kubeEtcd:
    enabled: true

    service:
      enabled: true

      ipDualStack:
        enabled: false

    serviceMonitor:
      enabled: true

  kubeScheduler:
    enabled: false

    service:
      enabled: false
      ipDualStack:
        enabled: false

    serviceMonitor:
      enabled: false

  kubeProxy:
    enabled: true

    service:
      enabled: true

      ipDualStack:
        enabled: false

    serviceMonitor:
      enabled: true

  kubeStateMetrics:
    enabled: true

  kube-state-metrics:
    rbac:
      create: true

    extraRules:
      - apiGroups: ["autoscaling.k8s.io"]
        resources: ["verticalpodautoscalers"]
        verbs: ["list", "watch"]
      - apiGroups: ["apiextensions.k8s.io"]
        resources: ["customresourcedefinitions"]
        verbs: ["list", "watch"]

    prometheusScrape: true

    prometheus:
      monitor:
        enabled: true

      volumes:
        - name: own-ca-bundle
          configMap:
            name: own-ca-bundle
            defaultMode: 0644
            optional: false
            items:
            - key: own-ca-bundle.pem
              path: ca-certificates.crt

      volumeMounts:
        - mountPath: /etc/ssl/certs/
          name: own-ca-bundle
          readOnly: true

    customResourceState:
      enabled: true
      config:
        kind: CustomResourceStateMetrics
        spec:
          resources:
            - groupVersionKind:
                group: autoscaling.k8s.io
                kind: "VerticalPodAutoscaler"
                version: "v1"
              labelsFromPath:
                verticalpodautoscaler: [metadata, name]
                namespace: [metadata, namespace]
                target_api_version: [apiVersion]
                target_kind: [spec, targetRef, kind]
                target_name: [spec, targetRef, name]
              metrics:
                - name: "vpa_containerrecommendations_target"
                  help: "VPA container recommendations for memory."
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [target, memory]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "memory"
                    unit: "byte"
                - name: "vpa_containerrecommendations_target"
                  help: "VPA container recommendations for cpu."
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [target, cpu]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "cpu"
                    unit: "core"
                # other ref
                - name: "verticalpodautoscaler_labels"
                  help: "VPA container recommendations. Kubernetes labels converted to Prometheus labels"
                  each:
                    type: Info
                    info:
                      labelsFromPath:
                        name: [metadata, name]
                # Memory Information
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_target"
                  help: "VPA container recommendations for memory. Target resources the VerticalPodAutoscaler recommends for the container."
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [target, memory]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "memory"
                    unit: "byte"
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_lowerbound"
                  help: "VPA container recommendations for memory. Minimum resources the container can use before the VerticalPodAutoscaler updater evicts it"
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [lowerBound, memory]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "memory"
                    unit: "byte"
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_upperbound"
                  help: "VPA container recommendations for memory. Maximum resources the container can use before the VerticalPodAutoscaler updater evicts it"
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [upperBound, memory]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "memory"
                    unit: "byte"
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_uncappedtarget"
                  help: "VPA container recommendations for memory. Target resources the VerticalPodAutoscaler recommends for the container ignoring bounds"
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [uncappedTarget, memory]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "memory"
                    unit: "byte"
                # CPU Information
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_target"
                  help: "VPA container recommendations for cpu. Target resources the VerticalPodAutoscaler recommends for the container."
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [target, cpu]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "cpu"
                    unit: "core"
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_lowerbound"
                  help: "VPA container recommendations for cpu. Minimum resources the container can use before the VerticalPodAutoscaler updater evicts it"
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [lowerBound, cpu]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "cpu"
                    unit: "core"
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_upperbound"
                  help: "VPA container recommendations for cpu. Maximum resources the container can use before the VerticalPodAutoscaler updater evicts it"
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [upperBound, cpu]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "cpu"
                    unit: "core"
                - name: "verticalpodautoscaler_status_recommendation_containerrecommendations_uncappedtarget"
                  help: "VPA container recommendations for cpu. Target resources the VerticalPodAutoscaler recommends for the container ignoring bounds"
                  each:
                    type: Gauge
                    gauge:
                      path: [status, recommendation, containerRecommendations]
                      valueFrom: [uncappedTarget, cpu]
                      labelsFromPath:
                        container: [containerName]
                  commonLabels:
                    resource: "cpu"
                    unit: "core"
    selfMonitor:
      enabled: true

  nodeExporter:
    enabled: true

    operatingSystems:
      linux:
        enabled: true
      aix:
        enabled: false
      darwin:
        enabled: false

  prometheus-node-exporter:
    prometheus:
      monitor:
        enabled: true

  prometheusOperator:
    enabled: true

    tls:
      enabled: true

    admissionWebhooks:
      enabled: true
      failurePolicy: Fail

      annotations:
        argocd.argoproj.io/hook: PreSync
        argocd.argoproj.io/hook-delete-policy: HookFailed

      mutatingWebhookConfiguration:
        annotations:
          argocd.argoproj.io/hook: PreSync

      validatingWebhookConfiguration:
        annotations:
          argocd.argoproj.io/hook: PreSync

      patch:
        enabled: true

        annotations:
          argocd.argoproj.io/hook: PreSync
          argocd.argoproj.io/hook-delete-policy: HookFailed

        podAnnotations:
          sidecar.istio.io/inject: "false"

      certManager:
        enabled: true
        admissionCert:
          issuerRef:
            name: vault-cert-issuer
            kind: ClusterIssuer

    service:
      ipDualStack:
        enabled: false
      type: ClusterIP

    serviceMonitor:
      selfMonitor: true
      additionalLabels: {}

    # Enable vertical pod autoscaler support for prometheus-operator
    verticalPodAutoscaler:
      enabled: false

    prometheusConfigReloader:
      enableProbe: false

  prometheus:
    enabled: true

    service:
      ipDualStack:
        enabled: false

    serviceMonitor:
      selfMonitor: true
      additionalLabels: {}

    prometheusSpec:
      enableRemoteWriteReceiver: true

      persistentVolumeClaimRetentionPolicy: {}

      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

    serviceMonitor:
      selfMonitor: true

    #secrets:
    #  # The Secrets are mounted into /etc/prometheus/secrets/
    #  - vault_token

    #additionalScrapeConfigs:
    #  - job_name: vault
    #    # https://developer.hashicorp.com/vault/tutorials/archive/monitor-telemetry-grafana-prometheus
    #    metrics_path: /v1/sys/metrics
    #    params:
    #      format: ['prometheus']
    #    scheme: https
    #    authorization:
    #      credentials_file: /etc/prometheus/secrets/vault-token
    #    static_configs:
    #      - targets: 
    #          - vault-0.vault-system:8200
    #          - vault-1.vault-system:8200
    #          - vault-2.vault-system:8200
