schema:
  env: minikube

zitadel:
  zitadel:
    # See all defaults here:
    # https://github.com/zitadel/zitadel/blob/main/cmd/defaults.yaml
    configmapConfig:
      ExternalDomain: zitadel.minikube.where-ever.net
      ExternalSecure: true
      Machine:
        Identification:
          Hostname: 
            Enabled: true
          Webhook:
            Enabled: true

      TLS:
        Enabled: false

      FirstInstance:
        Org:
          LoginClient:
            Machine:
              Username: 'login-client'
              Name: 'Automatically Initialized IAM Login Client'
            Pat.ExpirationDate: '2029-01-01T00:00:00Z'
  
    # The ZITADEL config under secretConfig is written to a Kubernetes Secret
    # See all defaults here:
    # https://github.com/zitadel/zitadel/blob/main/cmd/defaults.yaml
    secretConfig:
  
    # Reference the name of a secret that contains ZITADEL configuration.
    configSecretName:
    # The key under which the ZITADEL configuration is located in the secret.
    configSecretKey: config-yaml
  
    # ZITADEL uses the masterkey for symmetric encryption.
    # You can generate it for example with tr -dc A-Za-z0-9 </dev/urandom | head -c 32
    #masterkey: ""
    # Reference the name of the secret that contains the masterkey. The key should be named "masterkey".
    # Note: Either zitadel.masterkey or zitadel.masterkeySecretName must be set
    masterkeySecretName: "masterkey"
  
    # The CA Certificate needed for establishing secure database connections
    dbSslCaCrt: ""
  
    # Annotations set on database SSL CA certificate secret
    dbSslCaCrtAnnotations:
      helm.sh/hook: pre-install,pre-upgrade
      helm.sh/hook-delete-policy: before-hook-creation
      helm.sh/hook-weight: "0"
  
    # The Secret containing the CA certificate at key ca.crt needed for establishing secure database connections
    dbSslCaCrtSecret: "psql-tls"
  
    # The db admins secret containing the client certificate and key at tls.crt and tls.key needed for establishing secure database connections
    dbSslAdminCrtSecret: "psql-tls"
  
    # The db users secret containing the client certificate and key at tls.crt and tls.key needed for establishing secure database connections
    dbSslUserCrtSecret: "psql-tls"
  
    # The Secret containing the certificate at key tls.crt and tls.key for listening on HTTPS
    serverSslCrtSecret: "psql-tls"
  
    selfSignedCert:
      enabled: false
  
    debug:
      enabled: false
  
  login:
    enabled: true
    # customConfigmapConfig defaults to this:
    # ZITADEL_SERVICE_USER_TOKEN_FILE="/login-client/pat"
    # ZITADEL_API_URL="http://{{ include "zitadel.fullname" . }}:{{ .Values.service.port }}"
    # CUSTOM_REQUEST_HEADERS="Host:{{ .Values.zitadel.configmapConfig.ExternalDomain }}"
    #customConfigmapConfig:
    #  ZITADEL_API_URL="http://zitadel:8080"
    # To deploy zitadel multiple times in the same namespace, use a loginClientSecretPrefix.
    # To mount it, also change the referenced secretName for the login client to "{loginClientSecretPrefix}login-client"
    loginClientSecretPrefix:
    extraVolumeMounts:
      - name: login-client
        mountPath: /login-client
        readOnly: true
    extraVolumes:
      - name: login-client
        secret:
          defaultMode: 444
          secretName: login-client
    replicaCount: 1
    service:
      type: ClusterIP
    ingress:
      enabled: false
  
  replicaCount: 1
  
  # Additional environment variables
  env:
    - name: ZITADEL_DEFAULTINSTANCE_FEATURES_LOGINV2_REQUIRED
      value: "false"
    - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME
      valueFrom:
        secretKeyRef:
          name: zitadel-admin
          key: username
    - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: zitadel-admin
          key: password
    - name: ZITADEL_DATABASE_POSTGRES_HOST
      value: "db-rw.zitadel.svc.cluster.local"
    - name: ZITADEL_DATABASE_POSTGRES_DATABASE
      value: "5432"
    - name: ZITADEL_DATABASE_POSTGRES_DATABASE
      value: "zitadel"
    #- name: ZITADEL_DATABASE_POSTGRES_ADMIN_EXISTINGDATABASE
    #  value: "zitadel"
    - name: ZITADEL_DATABASE_POSTGRES_MAXOPENCONNS
      value: "10"
    - name: ZITADEL_DATABASE_POSTGRES_MAXIDLECONNS
      value: "5"
    - name: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-zitadel
          key: username
    - name: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-zitadel
          key: password
    - name: ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE
      value: verify-full
      #value: disable
    - name: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-postgres
          key: username
    - name: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-postgres
          key: password
    - name: ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE
      value: verify-full
      #value: disable
    - name: ZITADEL_DATABASE_POSTGRES_USER_SSL_ROOTCERT
      value: /ssl/certs/postgresql/ca.crt
    - name: ZITADEL_DATABASE_POSTGRES_USER_SSL_CERT
      value: /ssl/certs/postgresql/tls.crt
    - name: ZITADEL_DATABASE_POSTGRES_USER_SSL_KEY
      value: /ssl/certs/postgresql/tls.key
    - name: ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_ROOTCERT
      value: /ssl/certs/postgresql/ca.crt
    - name: ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_CERT
      value: /ssl/certs/postgresql/tls.crt
    - name: ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_KEY
      value: /ssl/certs/postgresql/tls.key
  
  # Additional environment variables from the given secret name
  # Zitadel can be configured using environment variables from a secret.
  # Reference: https://zitadel.com/docs/self-hosting/manage/configure#configure-by-environment-variables
  envVarsSecret: ""
  
  service:
    type: ClusterIP
  
  ingress:
    enabled: false
  
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
  
  pdb:
    enabled: false
  
  extraVolumeMounts:
    - mountPath: /etc/ssl/certs/
      name: own-ca-bundle
      readOnly: true
    - name: db-ca-cert
      mountPath: /ssl/certs/postgresql
      readOnly: true
  
  extraVolumes:
    - name: own-ca-bundle
      configMap:
        name: own-ca-bundle
        defaultMode: 0644
        optional: false
        items:
          - key: own-ca-bundle.pem
            path: ca-certificates.crt
    - name: db-ca-cert
      secret:
        secretName: psql-tls
        #items:
        #  - key: ca.crt
        #    path: ca.crt
