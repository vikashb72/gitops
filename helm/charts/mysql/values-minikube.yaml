schema:
  env: minikube

mysql:
  global:
    defaultStorageClass: "nfs-client"
    storageClass: "nfs-client"
  diagnosticMode:
    enabled: false
  ## @param architecture MySQL architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    createDatabase: true
    database: "fleet"
    username: "fleet"
    replicationUser: replicator
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: "mysql-secrets"
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: true
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mysql-root
    ##   user: /vault/secrets/mysql-user
    ##   replicator: /vault/secrets/mysql-replicator
    ##
    customPasswordFiles: {}
  ## @param tls.enabled Enable TLS in MySQL
  ## @param tls.existingSecret Existing secret that contains TLS certificates
  ## @param tls.certFilename The secret key from the existingSecret if 'cert' key different from the default (tls.crt)
  ## @param tls.certKeyFilename The secret key from the existingSecret if 'key' key different from the default (tls.key)
  ## @param tls.certCAFilename The secret key from the existingSecret if 'ca' key different from the default (tls.crt)
  ## @param tls.ca CA certificate for TLS. Ignored if `tls.existingSecret` is set
  ## @param tls.cert TLS certificate for MySQL. Ignored if `tls.existingSecret` is set
  ## @param tls.key TLS key for MySQL. Ignored if `tls.existingSecret` is set
  ##
  tls:
    enabled: true
    existingSecret: "mysql-tls"
    certFilename: "tls.crt"
    certKeyFilename: "tls.key"
    certCAFilename: "ca.crt"
    ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
    ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
    autoGenerated:
      enabled: false
      engine: cert-manager
      certManager:
        existingIssuer: "vault-cert-issuer"
        existingIssuerKind: "ClusterIssuer"
        keySize: 2048
        keyAlgorithm: RSA
        duration: 2160h
        renewBefore: 360h
  
  ## @section MySQL Primary parameters
  ##
  primary:
    name: primary
    ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      authentication_policy='{{- .Values.auth.authenticationPolicy | default "* ,," }}'
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port={{ .Values.primary.containerPorts.mysql }}
      mysqlx={{ ternary 1 0 .Values.primary.enableMySQLX }}
      mysqlx_port={{ .Values.primary.containerPorts.mysqlx }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      slow_query_log=0
      long_query_time=10.0
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mysql.tlsCACert" .) }}
      ssl_ca={{ include "mysql.tlsCACert" . }}
      {{- end }}
      {{- end }}
  
      [client]
      port={{ .Values.primary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin
  
      [manager]
      port={{ .Values.primary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    existingConfigmap: ""
    resourcesPreset: "small"
    persistence:
      enabled: true
      storageClass: "nfs-client"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    extraVolumes:
      - name: own-ca-bundle
        configMap:
          name: own-ca-bundle
          defaultMode: 0644
          optional: false
          items:
            - key: own-ca-bundle.pem
              path: ca-certificates.crt
    extraVolumeMounts:
      - mountPath: /etc/ssl/certs/
        name: own-ca-bundle
        readOnly: true

  secondary:
    name: secondary
    replicaCount: 1
    configuration: |-
      [mysqld]
      authentication_policy='{{- .Values.auth.authenticationPolicy | default "* ,," }}'
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port={{ .Values.secondary.containerPorts.mysql }}
      mysqlx={{ ternary 1 0 .Values.secondary.enableMySQLX }}
      mysqlx_port={{ .Values.secondary.containerPorts.mysqlx }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      slow_query_log=0
      long_query_time=10.0
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mysql.tlsCACert" .) }}
      ssl_ca={{ include "mysql.tlsCACert" . }}
      {{- end }}
      {{- end }}
  
      [client]
      port={{ .Values.secondary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin
  
      [manager]
      port={{ .Values.secondary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    ##
    resourcesPreset: "small"
    persistence:
      enabled: true
      storageClass: "nfs-client"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    extraVolumes:
      - name: own-ca-bundle
        configMap:
          name: own-ca-bundle
          defaultMode: 0644
          optional: false
          items:
            - key: own-ca-bundle.pem
              path: ca-certificates.crt
    extraVolumeMounts:
      - mountPath: /etc/ssl/certs/
        name: own-ca-bundle
        readOnly: true
  serviceAccount:
    create: true
  rbac:
    create: false
    ## @param rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []
  
  networkPolicy:
    enabled: true
    allowExternal: true
  volumePermissions:
    enabled: false
    resourcesPreset: "nano"
  metrics:
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    serviceMonitor:
      enabled: false
    prometheusRule:
      enabled: false
      namespace: ""
      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      ##  - alert: Mysql-Down
      ##    expr: absent(up{job="mysql"} == 1)
      ##    for: 5m
      ##    labels:
      ##      severity: warning
      ##      service: mysql
      ##    annotations:
      ##      message: 'mysql instance {{`{{`}} $labels.instance {{`}}`}}  is down'
      ##      summary: mysql instance is down
      ##
      rules: []
