schema:
  env: minikube

mysql:
  global:
    defaultStorageClass: "nfs-client"
    storageClass: "nfs-client"
  diagnosticMode:
    enabled: false
  ## @param architecture MySQL architecture (`standalone` or `replication`)
  ##
  architecture: replication
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    createDatabase: true
    database: "fleet_dm"
    username: "fleet"
    replicationUser: replicator
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: "mysql-secrets"
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: true
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mysql-root
    ##   user: /vault/secrets/mysql-user
    ##   replicator: /vault/secrets/mysql-replicator
    ##
    customPasswordFiles: {}
  ## @param tls.enabled Enable TLS in MySQL
  ## @param tls.existingSecret Existing secret that contains TLS certificates
  ## @param tls.certFilename The secret key from the existingSecret if 'cert' key different from the default (tls.crt)
  ## @param tls.certKeyFilename The secret key from the existingSecret if 'key' key different from the default (tls.key)
  ## @param tls.certCAFilename The secret key from the existingSecret if 'ca' key different from the default (tls.crt)
  ## @param tls.ca CA certificate for TLS. Ignored if `tls.existingSecret` is set
  ## @param tls.cert TLS certificate for MySQL. Ignored if `tls.existingSecret` is set
  ## @param tls.key TLS key for MySQL. Ignored if `tls.existingSecret` is set
  ##
  tls:
    enabled: true
    existingSecret: ""
    certFilename: tls.crt
    certKeyFilename: tls.key
    certCAFilename: ""
    ca: ""
    cert: ""
    key: ""
    ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
    ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
    autoGenerated:
      enabled: true
      engine: cert-manager
      certManager:
        existingIssuer: "vault-cert-issuer"
        existingIssuerKind: "ClusterIssuer"
        keySize: 2048
        keyAlgorithm: RSA
        duration: 2160h
        renewBefore: 360h
  
  ## @section MySQL Primary parameters
  ##
  primary:
    ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
    ##
    name: primary
    ## @param primary.command Override default container command on MySQL Primary container(s) (useful when using custom images)
    ##
    command: []
    ## @param primary.args Override default container args on MySQL Primary container(s) (useful when using custom images)
    ##
    args: []
    ## @param primary.lifecycleHooks for the MySQL Primary container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param primary.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param primary.hostAliases Deployment pod host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param primary.enableMySQLX Enable mysqlx port
    ## ref: https://dev.mysql.com/doc/dev/mysql-server/latest/mysqlx_protocol_xplugin.html
    ##
    enableMySQLX: false
    ## @param primary.configuration [string] Configure MySQL Primary with a custom my.cnf file
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      authentication_policy='{{- .Values.auth.authenticationPolicy | default "* ,," }}'
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port={{ .Values.primary.containerPorts.mysql }}
      mysqlx={{ ternary 1 0 .Values.primary.enableMySQLX }}
      mysqlx_port={{ .Values.primary.containerPorts.mysqlx }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      slow_query_log=0
      long_query_time=10.0
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mysql.tlsCACert" .) }}
      ssl_ca={{ include "mysql.tlsCACert" . }}
      {{- end }}
      {{- end }}
  
      [client]
      port={{ .Values.primary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin
  
      [manager]
      port={{ .Values.primary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    ## @param primary.existingConfigmap Name of existing ConfigMap with MySQL Primary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    existingConfigmap: ""
    ## @param primary.containerPorts.mysql Container port for mysql
    ## @param primary.containerPorts.mysqlx Container port for mysqlx
    ##
    containerPorts:
      mysql: 3306
      mysqlx: 33060
    ## @param primary.updateStrategy.type Update strategy type for the MySQL primary statefulset
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      type: RollingUpdate
    ## @param primary.podAnnotations Additional pod annotations for MySQL primary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param primary.podAffinityPreset MySQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param primary.podAntiAffinityPreset MySQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## MySQL Primary node affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param primary.nodeAffinityPreset.type MySQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param primary.nodeAffinityPreset.key MySQL primary node label key to match Ignored if `primary.affinity` is set.
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## @param primary.nodeAffinityPreset.values MySQL primary node label values to match. Ignored if `primary.affinity` is set.
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param primary.affinity Affinity for MySQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}
    ## @param primary.nodeSelector Node labels for MySQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param primary.tolerations Tolerations for MySQL primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param primary.priorityClassName MySQL primary pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param primary.runtimeClassName MySQL primary pods' runtimeClassName
    ##
    runtimeClassName: ""
    ## @param primary.schedulerName Name of the k8s scheduler (other than default)
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    ##
    terminationGracePeriodSeconds: ""
    ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment
    ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## The value is evaluated as a template
    ##
    topologySpreadConstraints: []
    ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MySQL primary pods
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
    ##
    podManagementPolicy: ""
    ## MySQL primary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param primary.podSecurityContext.enabled Enable security context for MySQL primary pods
    ## @param primary.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param primary.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param primary.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## MySQL primary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param primary.containerSecurityContext.enabled MySQL primary container securityContext
    ## @param primary.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param primary.containerSecurityContext.runAsUser User ID for the MySQL primary container
    ## @param primary.containerSecurityContext.runAsGroup Group ID for the MySQL primary container
    ## @param primary.containerSecurityContext.runAsNonRoot Set MySQL primary container's Security Context runAsNonRoot
    ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's privilege escalation
    ## @param primary.containerSecurityContext.capabilities.drop Set container's Security Context runAsNonRoot
    ## @param primary.containerSecurityContext.seccompProfile.type Set Client container's Security Context seccomp profile
    ## @param primary.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
      readOnlyRootFilesystem: true
    ## MySQL primary container's resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "small"
    resources: {}
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param primary.livenessProbe.enabled Enable livenessProbe
    ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    persistence:
      enabled: true
      storageClass: "nfs-client"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    extraVolumes: []
    extraVolumeMounts: []
  secondary:
    name: secondary
    replicaCount: 1
    configuration: |-
      [mysqld]
      authentication_policy='{{- .Values.auth.authenticationPolicy | default "* ,," }}'
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port={{ .Values.secondary.containerPorts.mysql }}
      mysqlx={{ ternary 1 0 .Values.secondary.enableMySQLX }}
      mysqlx_port={{ .Values.secondary.containerPorts.mysqlx }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      slow_query_log=0
      long_query_time=10.0
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mysql.tlsCACert" .) }}
      ssl_ca={{ include "mysql.tlsCACert" . }}
      {{- end }}
      {{- end }}
  
      [client]
      port={{ .Values.secondary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin
  
      [manager]
      port={{ .Values.secondary.containerPorts.mysql }}
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    resourcesPreset: "small"
    persistence:
      enabled: true
      storageClass: "nfs-client"
      accessModes:
        - ReadWriteOnce
      size: 8Gi
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    extraVolumes: []
    extraVolumeMounts: []
  serviceAccount:
    create: true
  rbac:
    create: false
    ## @param rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []
  
  networkPolicy:
    enabled: true
    allowExternal: true
  volumePermissions:
    enabled: false
    resourcesPreset: "nano"
  metrics:
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    serviceMonitor:
      enabled: false
    prometheusRule:
      enabled: false
      namespace: ""
      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      ##  - alert: Mysql-Down
      ##    expr: absent(up{job="mysql"} == 1)
      ##    for: 5m
      ##    labels:
      ##      severity: warning
      ##      service: mysql
      ##    annotations:
      ##      message: 'mysql instance {{`{{`}} $labels.instance {{`}}`}}  is down'
      ##      summary: mysql instance is down
      ##
      rules: []
